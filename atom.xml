<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bbappyuanyuan 的博客</title>
  
  <subtitle>有些事，现在不做，以后再也不会做了</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bbappyuanyuan.github.io/"/>
  <updated>2018-06-05T12:00:00.000Z</updated>
  <id>https://bbappyuanyuan.github.io/</id>
  
  <author>
    <name>bbappyuanyuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Code Jam Kickstart Round C 2018 题解</title>
    <link href="https://bbappyuanyuan.github.io/posts/ece178b7/"/>
    <id>https://bbappyuanyuan.github.io/posts/ece178b7/</id>
    <published>2018-06-05T12:00:00.000Z</published>
    <updated>2018-06-05T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="a-planet-distance"><a class="markdownIt-Anchor" href="#a-planet-distance"></a> <a href="https://code.google.com/codejam/contest/4384486/dashboard#s=p0" target="_blank" rel="noopener">A. Planet Distance</a></h2><p>一轮 dfs 找出环的所有节点，接着从这些节点 bfs，即可求得距离。时间复杂度为 <code>O(n)</code>。</p><a id="more"></a><h2 id="b-fairies-and-witches"><a class="markdownIt-Anchor" href="#b-fairies-and-witches"></a> <a href="https://code.google.com/codejam/contest/4384486/dashboard#s=p1" target="_blank" rel="noopener">B. Fairies and Witches</a></h2><p>最终选出来的每个 stick 占用两个 node，对于小数据，可选方案里只可能有 3 个 stick，因此三层循环枚举 3 个 stick，判断能否组成凸多边形即可（最长边长度小于其余边长度的和）。<br>对于大数据，最多 15 个点，可选方案里最多 7 个 stick，dfs 暴力搜索即可，记录 node 的占用状态、最长边长度和总边长（其余边长度的和 = 总边长 - 最长边长度）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> randomize srand((unsigned)time(NULL))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> random(x) ((rand() * (rand() + rand())) % (x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(x, y) memset(x, y, sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mc(x, y) memcpy(x, y, sizeof(x))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">15</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, ans;</span><br><span class="line"><span class="keyword">int</span> a[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> b[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> cm, <span class="keyword">int</span> sume, <span class="keyword">int</span> maxe)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sume - maxe &gt; maxe)</span><br><span class="line">        ++ans;</span><br><span class="line">    <span class="keyword">while</span> (from &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(cm &amp; (<span class="number">1</span> &lt;&lt; from))) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b[from][<span class="number">0</span>]; ++i) &#123;</span><br><span class="line">                <span class="keyword">int</span> to = b[from][i];</span><br><span class="line">                <span class="keyword">if</span> (!(cm &amp; (<span class="number">1</span> &lt;&lt; to)))</span><br><span class="line">                    dfs(from + <span class="number">1</span>, cm | (<span class="number">1</span> &lt;&lt; from) | (<span class="number">1</span> &lt;&lt; to), sume + a[from][to], max(maxe, a[from][to]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++from;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cs = <span class="number">1</span>; cs &lt;= T; ++cs) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            b[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (a[i][j] &gt; <span class="number">0</span>)</span><br><span class="line">                    b[i][++b[i][<span class="number">0</span>]] = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; cs &lt;&lt; <span class="string">": "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c-kickstart-alarm"><a class="markdownIt-Anchor" href="#c-kickstart-alarm"></a> <a href="https://code.google.com/codejam/contest/4384486/dashboard#s=p2" target="_blank" rel="noopener">C. Kickstart Alarm</a></h2><p>数学题，通过整理可以得出：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>n</mi><mi>s</mi><mi>w</mi><mi>e</mi><mi>r</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></munderover><munderover><mo>∑</mo><mrow><mi>l</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><msub><mi>A</mi><mi>i</mi></msub><mo>∗</mo><mo>(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo>)</mo><mo>∗</mo><msup><mi>j</mi><mi>l</mi></msup></mrow><annotation encoding="application/x-tex">Answer = \sum_{i=1}^{n} \sum_{j=1}^{i} \sum_{l=1}^{k} A_i * (n - i + 1) * j^l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.836113em;"></span><span class="strut bottom" style="height:3.2498899999999997em;vertical-align:-1.4137769999999998em;"></span><span class="base"><span class="mord mathit">A</span><span class="mord mathit">n</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.836113em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.01968em;">l</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">i</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span></span></span></span></p><p>整理一下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><msup><mi>i</mi><mi>j</mi></msup><mtext> </mtext><mtext> </mtext><mtext> </mtext><mtext> </mtext><msub><mi>s</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></munderover><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i = \sum_{j=1}^{k} i^j \text{ }\text{ }\text{ }\text{ } s_i = \sum_{j=1}^{i} p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.8361130000000006em;"></span><span class="strut bottom" style="height:3.2498900000000006em;vertical-align:-1.4137769999999998em;"></span><span class="base"><span class="mord"><span class="mord mathit">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span><span class="mord text"><span class="mord"> </span></span><span class="mord text"><span class="mord"> </span></span><span class="mord text"><span class="mord"> </span></span><span class="mord text"><span class="mord"> </span></span><span class="mord"><span class="mord mathit">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>n</mi><mi>s</mi><mi>w</mi><mi>e</mi><mi>r</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>A</mi><mi>i</mi></msub><mo>∗</mo><mo>(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo>)</mo><mo>∗</mo><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Answer = \sum_{i=1}^{n} A_i * (n - i + 1) * s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.6513970000000002em;"></span><span class="strut bottom" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="base"><span class="mord mathit">A</span><span class="mord mathit">n</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">i</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathit">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base"><span class="mord"><span class="mord mathit">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span></span></span></span> 是等比序列和，因为需要取模，我使用二分来实现，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base"><span class="mord"><span class="mord mathit">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span></span></span></span> 随着 i 的递推可以求得，因此总时间复杂度 <code>O(n * log(k))</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> randomize srand((unsigned)time(NULL))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> random(x) ((rand() * (rand() + rand())) % (x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(x, y) memset(x, y, sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mc(x, y) memcpy(x, y, sizeof(x))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, k;</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="comment">// a^b</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            ret = (<span class="keyword">long</span> <span class="keyword">long</span>) ret * a % MOD;</span><br><span class="line">        a = (<span class="keyword">long</span> <span class="keyword">long</span>) a * a % MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="comment">// a^1+a^2+...+a^b</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">1</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">int</span> ret = (<span class="keyword">long</span> <span class="keyword">long</span>) sum(a, b &gt;&gt; <span class="number">1</span>) * (<span class="number">1</span> + <span class="built_in">pow</span>(a, b &gt;&gt; <span class="number">1</span>)) % MOD;</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        ret += <span class="built_in">pow</span>(a, b);</span><br><span class="line">        <span class="keyword">if</span> (ret &gt;= MOD) ret -= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cs = <span class="number">1</span>; cs &lt;= T; ++cs) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x, y, c, d, e1, e2;</span><br><span class="line">        <span class="keyword">int</span> f;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; x &gt;&gt; y &gt;&gt; c &gt;&gt; d &gt;&gt; e1 &gt;&gt; e2 &gt;&gt; f;</span><br><span class="line">        a[<span class="number">1</span>] = (x + y) % f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> _x = (c * x + d * y + e1) % f;</span><br><span class="line">            <span class="keyword">int</span> _y = (d * x + c * y + e2) % f;</span><br><span class="line">            x = _x;</span><br><span class="line">            y = _y;</span><br><span class="line">            a[i] = (x + y) % f;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>; <span class="comment">// (1^1+1^2+...+1^k)+(2^1+2^2+...+2^k)+...+(i^1+i^2+...+i^k)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            s += sum(i, k);</span><br><span class="line">            <span class="keyword">if</span> (s &gt;= MOD) s -= MOD;</span><br><span class="line">            ans += ((<span class="keyword">long</span> <span class="keyword">long</span>) a[i] * (n - i + <span class="number">1</span>) % MOD * s) % MOD;</span><br><span class="line">            <span class="keyword">if</span> (ans &gt;= MOD) ans -= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; cs &lt;&lt; <span class="string">": "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;a-planet-distance&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#a-planet-distance&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://code.google.com/codejam/contest/4384486/dashboard#s=p0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A. Planet Distance&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一轮 dfs 找出环的所有节点，接着从这些节点 bfs，即可求得距离。时间复杂度为 &lt;code&gt;O(n)&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Code Jam" scheme="https://bbappyuanyuan.github.io/categories/Code-Jam/"/>
    
    
  </entry>
  
  <entry>
    <title>Code Jam Kickstart Round B 2018 题解</title>
    <link href="https://bbappyuanyuan.github.io/posts/3177a132/"/>
    <id>https://bbappyuanyuan.github.io/posts/3177a132/</id>
    <published>2018-06-05T12:00:00.000Z</published>
    <updated>2018-06-05T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这套题偏难 _(:з」∠)_</p><h2 id="a-no-nine"><a class="markdownIt-Anchor" href="#a-no-nine"></a> <a href="https://code.google.com/codejam/contest/10284486/dashboard#s=p0" target="_blank" rel="noopener">A. No Nine</a></h2><p>求 [L, R] 的合法数字个数，可以转化为求 [1, x] 的合法数字个数。</p><p>不能有数字 9，也就是只允许数字 0～8，这就相当于九进制数，即 [1, x] 的不含 9 的数字个数有 base9(x) 个（x 为不含 9 的十进制数）。而且每连续 9 个不含 9 的数字里，有且只有一个被 9 整除的数（九进制下末位为 0 的数）。因此先把 x 的末位变成 0，让剩余的不含 9 的数字个数能被 9 整除，答案为 <code>brute_force([x - x % 10, x]) + 8 / 9 * base9(x - x % 10)</code>，两部分分别对应代码里的 <code>ret1</code> 和 <code>ret2</code>。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> randomize srand((unsigned)time(NULL))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> random(x) ((rand() * (rand() + rand())) % (x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(x, y) memset(x, y, sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mc(x, y) memcpy(x, y, sizeof(x))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">f</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x % <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">9</span> != <span class="number">0</span>) ++ret1;</span><br><span class="line">        --x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x % <span class="number">9</span> != <span class="number">0</span>) ++ret1; <span class="comment">// ending 0</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret2 = <span class="number">0</span>, base = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        ret2 = ret2 + base * (x % <span class="number">10</span>);</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">        base *= <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret1 + ret2 / <span class="number">9</span> * <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x % <span class="number">9</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">10</span> == <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">bf</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = a; i &lt;= b; ++i)</span><br><span class="line">        <span class="keyword">if</span> (check(i)) &#123;</span><br><span class="line"><span class="comment">//            cout &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line">            ++ret;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cs = <span class="number">1</span>; cs &lt;= T; ++cs) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> F, L;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; F &gt;&gt; L;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; cs &lt;&lt; <span class="string">": "</span> &lt;&lt; f(L) - f(F) + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//        cout &lt;&lt; "Case #" &lt;&lt; cs &lt;&lt; ": " &lt;&lt; bf(F, L) &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="b-sherlock-and-the-bit-strings"><a class="markdownIt-Anchor" href="#b-sherlock-and-the-bit-strings"></a> <a href="https://code.google.com/codejam/contest/10284486/dashboard#s=p1" target="_blank" rel="noopener">B. Sherlock and the Bit Strings</a></h2><p>关键信息 <code>Bi - Ai ≤ 15</code>，递推记录最近的 16 位，f[i][j] 表示前 i 位已确定，并且最后 16 位为 j（j ≤ 2^16）的可行方案数。从后往前（i 从大到小）递推，递推式为 <code>f[i][j] = f[i + 1][shl1[j]] + f[i + 1][shl1[j] ^ 1]</code>，shl1[j] 和 shl1[j]^1 分别为 j 去掉首位、末尾添加 0 或 1 的状态（保持 16 位）。</p><p>对于每个限制 [Ak, Bk, Ck]，只需要在求 f[i][j], i = Bk 的时候判断即可，保证不合法的方案最终不会传递到前面。</p><p>时间复杂度为 <code>O(2 ^ 16 * (n + k))</code>，空间复杂度为 <code>O(2 ^ 16 * n)</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> randomize srand((unsigned)time(NULL))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> random(x) ((rand() * (rand() + rand())) % (x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(x, y) memset(x, y, sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mc(x, y) memcpy(x, y, sizeof(x))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> MAXP = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">1</span> &lt;&lt; <span class="number">16</span>], shl1[<span class="number">1</span> &lt;&lt; <span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> T, n, k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> p;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; limits[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[MAXN][<span class="number">1</span> &lt;&lt; <span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> limit : limits[pos])</span><br><span class="line">        <span class="keyword">if</span> (cnt[status &amp; ((<span class="number">1</span> &lt;&lt; limit.first) - <span class="number">1</span>)] != limit.second)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cnt[<span class="number">0</span>] = shl1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; <span class="number">16</span>; ++i) &#123;</span><br><span class="line">        cnt[i] = cnt[i &gt;&gt; <span class="number">1</span>] + (i &amp; <span class="number">1</span>); <span class="comment">// number of 1</span></span><br><span class="line">        shl1[i] = (i &lt;&lt; <span class="number">1</span>) &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">16</span>) - <span class="number">1</span>); <span class="comment">// shift left ignoring the first bit</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cs = <span class="number">1</span>; cs &lt;= T; ++cs) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; p;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            limits[i].clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> a, b, c;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">            limits[b].emplace_back(make_pair(b - a + <span class="number">1</span>, c)); <span class="comment">// (length, count)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ms(f, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; <span class="number">16</span>; ++j)</span><br><span class="line">            <span class="keyword">if</span> (check(n, j))</span><br><span class="line">                f[n][j] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; <span class="number">16</span>; ++j)</span><br><span class="line">                <span class="keyword">if</span> (check(i, j)) &#123;</span><br><span class="line">                    f[i][j] = f[i + <span class="number">1</span>][shl1[j]] + f[i + <span class="number">1</span>][shl1[j] ^ <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (f[i][j] &gt; MAXP) f[i][j] = MAXP + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; cs &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; ++i, j = shl1[j])</span><br><span class="line">            <span class="keyword">if</span> (p &lt;= f[i][j]) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p -= f[i][j];</span><br><span class="line">                j ^= <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">'1'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c-kings-circle"><a class="markdownIt-Anchor" href="#c-kings-circle"></a> <a href="https://code.google.com/codejam/contest/10284486/dashboard#s=p2" target="_blank" rel="noopener">C. King’s Circle</a></h2><p>首先必须想好怎样的三个点可以形成矩形：</p><ol><li>其中两点横坐标或纵坐标相等可以形成矩形；</li><li>从左向右排列，第二个点最高或最低（形如 ‘⋁’ 或 ‘⋀’），可以形成矩形；</li><li>横坐标从小到大排列下，只有纵坐标严格递增或严格递减的情况，才不可以形成矩形，且只有这一种不可以形成矩形的情况。</li></ol><p>3 的情况比 1 和 2 的情况更好判断，于是把答案转化为 <code>C(n, 3) - 不可以形成矩形的三点集数目</code>。</p><p>考虑每个点 p，从它往四个方向扩展的点集分别记为 n1、n2、n3 和 n4，如下图所示：</p><img src="/posts/3177a132/p3.PNG" title="丑陋的示意图"><p>{n1 里的任意一点, p, n3 里的任意一点} 和<br>{n2 里的任意一点, p, n4 里的任意一点} 的三点集不可以形成矩形，这里共有 <code>|n1| * |n3| + |n2| * |n4|</code> 种方案。</p><p>这种多维范围查询，可以使用 <a href="https://en.wikipedia.org/wiki/Range_tree" target="_blank" rel="noopener">range tree</a> 这一数据结构，可以参考这个资料：<a href="http://www.cs.wustl.edu/~taoju/cse546/lectures/Lecture21_rangequery_2d.pdf" target="_blank" rel="noopener">http://www.cs.wustl.edu/~taoju/cse546/lectures/Lecture21_rangequery_2d.pdf</a>。时间复杂度 <code>O(n * log(n) * log(n))</code>，可以降到 <code>O(n * log(n))</code>。</p><p>以下版本是原生的 range tree，运行 large-practice 数据需要大概 5 分钟。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> randomize srand((unsigned)time(NULL))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> random(x) ((rand() * (rand() + rand())) % (x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(x, y) memset(x, y, sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mc(x, y) memcpy(x, y, sizeof(x))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">500000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1000000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">range_tree_node_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> size; <span class="comment">// # of node</span></span><br><span class="line">    <span class="keyword">int</span> l, r; <span class="comment">// value range</span></span><br><span class="line">    <span class="keyword">int</span> mid; <span class="comment">// &lt;= mid, left; &gt; mid, right</span></span><br><span class="line">    <span class="built_in">unique_ptr</span>&lt;<span class="keyword">range_tree_node_t</span>&gt; left, right;</span><br><span class="line">    <span class="built_in">unique_ptr</span>&lt;<span class="keyword">range_tree_node_t</span>&gt; ytree;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">range_tree_node_t</span>() &#123;</span><br><span class="line">        left = <span class="literal">nullptr</span>;</span><br><span class="line">        right = <span class="literal">nullptr</span>;</span><br><span class="line">        ytree = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m;</span><br><span class="line"><span class="keyword">point_t</span> p[MAXN];</span><br><span class="line"><span class="keyword">int</span> px[MAXN], py[MAXN];</span><br><span class="line"><span class="built_in">unique_ptr</span>&lt;<span class="keyword">range_tree_node_t</span>&gt; xtree;</span><br><span class="line"><span class="keyword">int</span> tmpx[MAXN], tmpy[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_range_ytree</span><span class="params">(<span class="built_in">unique_ptr</span>&lt;<span class="keyword">range_tree_node_t</span>&gt; &amp;ytree, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//    printf("build_range_ytree %d %d\n", l, r);</span></span><br><span class="line">    ytree = make_unique&lt;<span class="keyword">range_tree_node_t</span>&gt;();</span><br><span class="line">    ytree-&gt;size = r - l;</span><br><span class="line">    ytree-&gt;l = py[l];</span><br><span class="line">    ytree-&gt;r = py[r - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    tmpy[m++] = py[l]; <span class="comment">// unique y</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt; r; ++i)</span><br><span class="line">        <span class="keyword">if</span> (py[i] != tmpy[m - <span class="number">1</span>])</span><br><span class="line">            tmpy[m++] = py[i];</span><br><span class="line">    ytree-&gt;mid = tmpy[(m - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>]; <span class="comment">// median</span></span><br><span class="line">    <span class="keyword">if</span> (m &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; r; ++i)</span><br><span class="line">            <span class="keyword">if</span> (py[i] &lt;= ytree-&gt;mid)</span><br><span class="line">                mid = i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        build_range_ytree(ytree-&gt;left, l, mid + <span class="number">1</span>);</span><br><span class="line">        build_range_ytree(ytree-&gt;right, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_range_xtree</span><span class="params">(<span class="built_in">unique_ptr</span>&lt;<span class="keyword">range_tree_node_t</span>&gt; &amp;xtree, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//    printf("build_range_xtree %d %d\n", l, r);</span></span><br><span class="line">    xtree = make_unique&lt;<span class="keyword">range_tree_node_t</span>&gt;();</span><br><span class="line">    xtree-&gt;size = r - l;</span><br><span class="line">    xtree-&gt;l = px[l];</span><br><span class="line">    xtree-&gt;r = px[r - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    tmpx[m++] = px[l]; <span class="comment">// unique x</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt; r; ++i)</span><br><span class="line">        <span class="keyword">if</span> (px[i] != tmpx[m - <span class="number">1</span>])</span><br><span class="line">            tmpx[m++] = px[i];</span><br><span class="line">    xtree-&gt;mid = tmpx[(m - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>]; <span class="comment">// median</span></span><br><span class="line">    <span class="keyword">if</span> (m &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; r; ++i)</span><br><span class="line">            <span class="keyword">if</span> (px[i] &lt;= xtree-&gt;mid)</span><br><span class="line">                mid = i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        build_range_xtree(xtree-&gt;left, l, mid + <span class="number">1</span>);</span><br><span class="line">        build_range_xtree(xtree-&gt;right, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// merge sort on y</span></span><br><span class="line">        <span class="built_in">memcpy</span>(tmpy + l, py + l, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (r - l));</span><br><span class="line">        m = l;</span><br><span class="line">        <span class="keyword">int</span> i1 = l, i2 = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (m &lt; r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i2 &gt;= r || i1 &lt; mid + <span class="number">1</span> &amp;&amp; tmpy[i1] &lt; tmpy[i2])</span><br><span class="line">                py[m++] = tmpy[i1++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                py[m++] = tmpy[i2++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    build_range_ytree(xtree-&gt;ytree, l, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryy</span><span class="params">(<span class="built_in">unique_ptr</span>&lt;<span class="keyword">range_tree_node_t</span>&gt; &amp;ytree, <span class="keyword">int</span> lx, <span class="keyword">int</span> rx, <span class="keyword">int</span> ly, <span class="keyword">int</span> ry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ytree-&gt;l &gt; ry || ytree-&gt;r &lt; ly) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ly &lt;= ytree-&gt;l &amp;&amp; ytree-&gt;r &lt;= ry)</span><br><span class="line">        <span class="keyword">return</span> ytree-&gt;size;</span><br><span class="line">    <span class="keyword">return</span> queryy(ytree-&gt;left, lx, rx, ly, ry) + queryy(ytree-&gt;right, lx, rx, ly, ry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryx</span><span class="params">(<span class="built_in">unique_ptr</span>&lt;<span class="keyword">range_tree_node_t</span>&gt; &amp;xtree, <span class="keyword">int</span> lx, <span class="keyword">int</span> rx, <span class="keyword">int</span> ly, <span class="keyword">int</span> ry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xtree-&gt;l &gt; rx || xtree-&gt;r &lt; lx) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (lx &lt;= xtree-&gt;l &amp;&amp; xtree-&gt;r &lt;= rx)</span><br><span class="line">        <span class="keyword">return</span> queryy(xtree-&gt;ytree, lx, rx, ly, ry);</span><br><span class="line">    <span class="keyword">return</span> queryx(xtree-&gt;left, lx, rx, ly, ry) + queryx(xtree-&gt;right, lx, rx, ly, ry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cs = <span class="number">1</span>; cs &lt;= T; ++cs) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c, d, e, f, m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p[<span class="number">0</span>].x &gt;&gt; p[<span class="number">0</span>].y &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e &gt;&gt; f &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            p[i].x = ((<span class="keyword">long</span> <span class="keyword">long</span>) a * p[i - <span class="number">1</span>].x + (<span class="keyword">long</span> <span class="keyword">long</span>) b * p[i - <span class="number">1</span>].y + c) % m;</span><br><span class="line">            p[i].y = ((<span class="keyword">long</span> <span class="keyword">long</span>) d * p[i - <span class="number">1</span>].x + (<span class="keyword">long</span> <span class="keyword">long</span>) e * p[i - <span class="number">1</span>].y + f) % m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(p, p + n, [](<span class="keyword">const</span> <span class="keyword">point_t</span> &amp;a, <span class="keyword">const</span> <span class="keyword">point_t</span> &amp;b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.x &lt; b.x || a.x == b.x &amp;&amp; a.y &lt; b.y;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            px[i] = p[i].x;</span><br><span class="line">            py[i] = p[i].y;</span><br><span class="line">        &#125;</span><br><span class="line">        build_range_xtree(xtree, <span class="number">0</span>, n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = (<span class="keyword">long</span> <span class="keyword">long</span>) n * (n - <span class="number">1</span>) * (n - <span class="number">2</span>) / <span class="number">3</span> / <span class="number">2</span>; <span class="comment">// C(n, 3)</span></span><br><span class="line"><span class="comment">//        n2 | n1</span></span><br><span class="line"><span class="comment">//        ---+---</span></span><br><span class="line"><span class="comment">//        n3 | n4</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> n1 = queryx(xtree, p[i].x + <span class="number">1</span>, MAXM, p[i].y + <span class="number">1</span>, MAXM);</span><br><span class="line">            <span class="keyword">int</span> n2 = queryx(xtree, -MAXM, p[i].x - <span class="number">1</span>, p[i].y + <span class="number">1</span>, MAXM);</span><br><span class="line">            <span class="keyword">int</span> n3 = queryx(xtree, -MAXM, p[i].x - <span class="number">1</span>, -MAXM, p[i].y - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> n4 = queryx(xtree, p[i].x + <span class="number">1</span>, MAXM, -MAXM, p[i].y - <span class="number">1</span>);</span><br><span class="line">            ans -= (<span class="keyword">long</span> <span class="keyword">long</span>) n1 * n3 + (<span class="keyword">long</span> <span class="keyword">long</span>) n2 * n4;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; cs &lt;&lt; <span class="string">": "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下版本利用查询特点进行优化，运行 large-practice 数据需要大概 50 秒。优化的地方包括：</p><ol><li>由于只有包含端点的查询，第二维 ytree 不使用树结构，使用有序数组；</li><li>由于查询的 x 有序（升序），手动维护相关的 xtree 节点（xnode 数组）。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> randomize srand((unsigned)time(NULL))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> random(x) ((rand() * (rand() + rand())) % (x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(x, y) memset(x, y, sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mc(x, y) memcpy(x, y, sizeof(x))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">500000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1000000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">range_tree_node_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> size; <span class="comment">// # of node</span></span><br><span class="line">    <span class="keyword">int</span> l, r; <span class="comment">// value range</span></span><br><span class="line">    <span class="keyword">int</span> mid; <span class="comment">// &lt;= mid, left; &gt; mid, right</span></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">range_tree_node_t</span>&gt; left, right, papa;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">range_tree_node_t</span>(<span class="built_in">shared_ptr</span>&lt;<span class="keyword">range_tree_node_t</span>&gt; _papa) &#123;</span><br><span class="line">        left = <span class="literal">nullptr</span>;</span><br><span class="line">        right = <span class="literal">nullptr</span>;</span><br><span class="line">        papa = _papa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m;</span><br><span class="line"><span class="keyword">point_t</span> p[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; px, py;</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">range_tree_node_t</span>&gt; xtree;</span><br><span class="line"><span class="keyword">int</span> tmpx[MAXN], tmpy[MAXN];</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">range_tree_node_t</span>&gt; dest[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">shared_ptr</span>&lt;<span class="keyword">range_tree_node_t</span>&gt;&gt; xnode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_range_xtree</span><span class="params">(<span class="built_in">shared_ptr</span>&lt;<span class="keyword">range_tree_node_t</span>&gt; &amp;xtree, <span class="built_in">shared_ptr</span>&lt;<span class="keyword">range_tree_node_t</span>&gt; papa, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//    printf("build_range_xtree %d %d\n", l, r);</span></span><br><span class="line">    xtree = make_shared&lt;<span class="keyword">range_tree_node_t</span>&gt;(papa);</span><br><span class="line">    xtree-&gt;size = r - l;</span><br><span class="line">    xtree-&gt;l = px[l];</span><br><span class="line">    xtree-&gt;r = px[r - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    tmpx[m++] = px[l]; <span class="comment">// unique x</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt; r; ++i)</span><br><span class="line">        <span class="keyword">if</span> (px[i] != tmpx[m - <span class="number">1</span>])</span><br><span class="line">            tmpx[m++] = px[i];</span><br><span class="line">    xtree-&gt;mid = tmpx[(m - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>]; <span class="comment">// median</span></span><br><span class="line">    <span class="keyword">if</span> (m &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; r; ++i)</span><br><span class="line">            <span class="keyword">if</span> (px[i] &lt;= xtree-&gt;mid)</span><br><span class="line">                mid = i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        build_range_xtree(xtree-&gt;left, xtree, l, mid + <span class="number">1</span>);</span><br><span class="line">        build_range_xtree(xtree-&gt;right, xtree, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// merge sort on y</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; r; ++i)</span><br><span class="line">            tmpy[i] = py[i];</span><br><span class="line">        m = l;</span><br><span class="line">        <span class="keyword">int</span> i1 = l, i2 = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (m &lt; r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i2 &gt;= r || i1 &lt; mid + <span class="number">1</span> &amp;&amp; tmpy[i1] &lt; tmpy[i2])</span><br><span class="line">                py[m++] = tmpy[i1++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                py[m++] = tmpy[i2++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        dest[l] = xtree;</span><br><span class="line">    xtree-&gt;y = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(py.begin() + l, py.begin() + r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">larger_than</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.end() - upper_bound(a.begin(), a.end(), x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">smaller_than</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lower_bound(a.begin(), a.end(), x) - a.begin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cs = <span class="number">1</span>; cs &lt;= T; ++cs) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c, d, e, f, m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p[<span class="number">0</span>].x &gt;&gt; p[<span class="number">0</span>].y &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e &gt;&gt; f &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            p[i].x = ((<span class="keyword">long</span> <span class="keyword">long</span>) a * p[i - <span class="number">1</span>].x + (<span class="keyword">long</span> <span class="keyword">long</span>) b * p[i - <span class="number">1</span>].y + c) % m;</span><br><span class="line">            p[i].y = ((<span class="keyword">long</span> <span class="keyword">long</span>) d * p[i - <span class="number">1</span>].x + (<span class="keyword">long</span> <span class="keyword">long</span>) e * p[i - <span class="number">1</span>].y + f) % m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(p, p + n, [](<span class="keyword">const</span> <span class="keyword">point_t</span> &amp;a, <span class="keyword">const</span> <span class="keyword">point_t</span> &amp;b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.x &lt; b.x || a.x == b.x &amp;&amp; a.y &lt; b.y;</span><br><span class="line">        &#125;);</span><br><span class="line">        px.resize(n);</span><br><span class="line">        py.resize(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            px[i] = p[i].x;</span><br><span class="line">            py[i] = p[i].y;</span><br><span class="line">        &#125;</span><br><span class="line">        build_range_xtree(xtree, <span class="literal">nullptr</span>, <span class="number">0</span>, n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = (<span class="keyword">long</span> <span class="keyword">long</span>) n * (n - <span class="number">1</span>) * (n - <span class="number">2</span>) / <span class="number">3</span> / <span class="number">2</span>; <span class="comment">// C(n, 3)</span></span><br><span class="line"><span class="comment">//        n2 | n1</span></span><br><span class="line"><span class="comment">//        ---+---</span></span><br><span class="line"><span class="comment">//        n3 | n4</span></span><br><span class="line">        <span class="keyword">int</span> n1, n2, n3, n4;</span><br><span class="line">        xnode.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i = j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; n &amp;&amp; p[j].x == p[i].x)</span><br><span class="line">                ++j;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; j; ++k) &#123;</span><br><span class="line">                n2 = n3 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> xn : xnode) &#123;</span><br><span class="line">                    n2 += larger_than(xn-&gt;y, p[k].y);</span><br><span class="line">                    n3 += smaller_than(xn-&gt;y, p[k].y);</span><br><span class="line">                &#125;</span><br><span class="line">                n1 = larger_than(py, p[k].y) - n2 - (j - k - <span class="number">1</span>);</span><br><span class="line">                n4 = smaller_than(py, p[k].y) - n3 - (k - i);</span><br><span class="line">                ans -= (<span class="keyword">long</span> <span class="keyword">long</span>) n1 * n3 + (<span class="keyword">long</span> <span class="keyword">long</span>) n2 * n4;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            xnode.emplace_back(dest[i]);</span><br><span class="line">            <span class="keyword">while</span> (xnode.size() &gt;= <span class="number">2</span> &amp;&amp; xnode[xnode.size() - <span class="number">1</span>]-&gt;papa == xnode[xnode.size() - <span class="number">2</span>]-&gt;papa) &#123;</span><br><span class="line">                xnode[xnode.size() - <span class="number">2</span>] = xnode[xnode.size() - <span class="number">1</span>]-&gt;papa;</span><br><span class="line">                xnode.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; cs &lt;&lt; <span class="string">": "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这套题偏难 _(:з」∠)_&lt;/p&gt;
&lt;h2 id=&quot;a-no-nine&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#a-no-nine&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://code.google.com/codejam/contest/10284486/dashboard#s=p0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A. No Nine&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;求 [L, R] 的合法数字个数，可以转化为求 [1, x] 的合法数字个数。&lt;/p&gt;
&lt;p&gt;不能有数字 9，也就是只允许数字 0～8，这就相当于九进制数，即 [1, x] 的不含 9 的数字个数有 base9(x) 个（x 为不含 9 的十进制数）。而且每连续 9 个不含 9 的数字里，有且只有一个被 9 整除的数（九进制下末位为 0 的数）。因此先把 x 的末位变成 0，让剩余的不含 9 的数字个数能被 9 整除，答案为 &lt;code&gt;brute_force([x - x % 10, x]) + 8 / 9 * base9(x - x % 10)&lt;/code&gt;，两部分分别对应代码里的 &lt;code&gt;ret1&lt;/code&gt; 和 &lt;code&gt;ret2&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Code Jam" scheme="https://bbappyuanyuan.github.io/categories/Code-Jam/"/>
    
    
  </entry>
  
  <entry>
    <title>拼图 GUI 界面 AVATAR 实现</title>
    <link href="https://bbappyuanyuan.github.io/posts/1face4da/"/>
    <id>https://bbappyuanyuan.github.io/posts/1face4da/</id>
    <published>2018-03-20T02:00:00.000Z</published>
    <updated>2018-03-27T02:20:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>2017 年 10 月～2018 年 3 月在南洋理工大学 DMAL 实验室做 RA，参与 Graph Mining 相关项目。这个项目做的是从图／网络里提取一定数量的 pattern，让用户能够方便地构造数据集相关的 query。这个项目的目标有别于别的相关工作：</p><ol><li>pattern 对数据集有尽可能高的覆盖率</li><li>pattern 间冗余度尽可能低</li></ol><p>详细描述见导师发的文章 <a href="http://www.vldb.org/pvldb/vol9/p984-bhowmick.pdf" target="_blank" rel="noopener">Data-driven Visual Graph Query Interface Construction and Maintenance: Challenges and Opportunities</a>。</p><p>到目前为止我已经实现了 pattern 提取的整个过程，接下来要做一些列实验和写论文。无论是实验或作品展示，都需要用户能够操作的 GUI 界面。但是实验室没有啊，怎么办？（其实实验室是有个用 Java Swing 做的半成品，Java 6 年代做的，研究了半天决定放弃）于是做数据挖掘的我又做起了熟悉的前端，前前后后花一个月做了出来。这篇文章介绍用 pattern 拼图的 GUI 界面实现（老板指定名字为 <code>AVATAR</code>，忘了问缘由）。至于 pattern 提取算法，等文章发出来再做介绍吧。</p><img src="/posts/1face4da/demo.png"><a id="more"></a><h2 id="技术和框架"><a class="markdownIt-Anchor" href="#技术和框架"></a> 技术和框架</h2><ul><li>作图库采用 <a href="https://github.com/Linkurious/linkurious.js" target="_blank" rel="noopener">Linkurious.js</a>，它基于 <a href="https://github.com/jacomyal/sigma.js/" target="_blank" rel="noopener">Sigma.js</a>，所以变量名保持为 <code>sigma</code>，尽管已经 deprecated，但它能正常使用而且提供 Sigma.js 没有的实用功能</li><li>前端使用了 jQuery，jQuery UI，Font Awesome，Bootstrap v4 等扩展（才发现 Bootstrap v4 正式发布了，从官网学习了新特征，比 v3 用得方便）</li><li>软件主要是前端的工作，后端比较简单，所以想试试用 Node.js 写后端，使用 <code>Express</code> 框架</li></ul><h2 id="功能和实现"><a class="markdownIt-Anchor" href="#功能和实现"></a> 功能和实现</h2><h3 id="上传-加载数据集"><a class="markdownIt-Anchor" href="#上传-加载数据集"></a> 上传、加载数据集</h3><p>用户可以在 <code>Upload datastore</code> 窗口上传固定格式的数据集，让后台生成 pattern。数据集上传后，后台会异步地调用算法程序（C++ 编码）处理数据集，生成 pattern 等信息，通过文件输出等形式让前端跟踪进度。</p><img src="/posts/1face4da/upload-datastore.png"><p>用户可以在 <code>Load datastore</code> 窗口看到现有数据集和正在处理的数据集和处理的进度，可以加载现有的一个数据集。</p><img src="/posts/1face4da/load-datastore.png"><p>我使用 <code>child_process.spwan</code> 接口进行异步调用。上传文件我使用了 <code>connect-busboy</code> 包，实现了以流的方式上传文件。网上的其他上传文件方式（比如 <code>express-fileupload</code> 包）我都尝试过，那些方法不但速度比不上 busboy，而且无法上传 1 GB 左右的大文件（后端会出错，具体消息忘了，大概意思是 memory 不足）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">req.busboy.on(<span class="string">'file'</span>, (fieldname, file, filename) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> fstream = fs.createWriteStream(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/data/<span class="subst">$&#123;name&#125;</span>/graph`</span>)</span><br><span class="line">    file.pipe(fstream)</span><br><span class="line">    fstream.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> davinci = spawn(<span class="string">'./Davinci'</span>, [name, <span class="string">'-step1'</span>])</span><br><span class="line">        davinci.on(<span class="string">'close'</span>, (code) =&gt; &#123;</span><br><span class="line">            utilities.appendLog(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/data/<span class="subst">$&#123;name&#125;</span>/graph_log`</span>, <span class="string">`child process exited with code <span class="subst">$&#123;code&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> != code)</span><br><span class="line">                fs.writeFile(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/data/<span class="subst">$&#123;name&#125;</span>/error`</span>, <span class="string">'Runtime error'</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        res.json(&#123; <span class="attr">success</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>程序运行完会生成 <code>GraphInfo.json</code>，<code>labels.json</code>，<code>limits.json</code>，<code>patterns.json</code> 等文件，描述了前端所需要的信息。加载数据集后页面会显示数据集概况和标签。</p><img src="/posts/1face4da/after-load-datastore.png"><h3 id="生成和展示-pattern"><a class="markdownIt-Anchor" href="#生成和展示-pattern"></a> 生成和展示 pattern</h3><p>加载数据集时候 pattern 已经有了，这一步用户在 <code>Generate patterns</code> 窗口指定数量和边数。</p><img src="/posts/1face4da/generate-patterns.png"><p>调用选择 pattern 的程序，这一步需要对 pattern 进行冗余选取，多次调用 boost 的图形库函数，尽管使用了多线程，速度也不是特别快，一分钟左右。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/datastores/:name/patterns'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> name = req.params[<span class="string">'name'</span>]</span><br><span class="line">    <span class="keyword">let</span> num = req.query[<span class="string">'num'</span>]</span><br><span class="line">    <span class="keyword">let</span> minSize = req.query[<span class="string">'minSize'</span>]</span><br><span class="line">    <span class="keyword">let</span> maxSize = req.query[<span class="string">'maxSize'</span>]</span><br><span class="line">    <span class="keyword">let</span> davinci = spawn(<span class="string">'./Davinci'</span>, [name, <span class="string">'-step2'</span>, num, minSize, maxSize])</span><br><span class="line">    davinci.on(<span class="string">'close'</span>, (code) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> content = fs.readFileSync(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/data/<span class="subst">$&#123;name&#125;</span>/patterns<span class="subst">$&#123;num&#125;</span>-<span class="subst">$&#123;minSize&#125;</span>-<span class="subst">$&#123;maxSize&#125;</span>.json`</span>, <span class="string">'utf8'</span>)</span><br><span class="line">        res.json(<span class="built_in">JSON</span>.parse(content))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>图的分布是 NP 问题，界面的目标是尽可能清晰地展示 pattern 供用户使用，由于时间关系我不能花大量时间在图显示布局方面，对比现成的常用布局算法，我选用了 <code>ForceAtlas2</code>，Linkurious.js 提供这个<a href="https://github.com/Linkurious/linkurious.js/tree/develop/plugins/sigma.layouts.forceAtlas2" target="_blank" rel="noopener">布局插件</a>。布局算法过后，我会适当旋转和拉伸点使得 pattern 尽可能地占满显示窗口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Draw generated pattern in drawing board</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * @param   &#123;Sigma&#125;     s</span></span><br><span class="line"><span class="comment">  * @param   &#123;object&#125;    pattern</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawGeneratedPattern</span>(<span class="params">s, pattern</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> gap = PATTERN_NODE_SIZE * <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pattern.n; ++i)</span><br><span class="line">        addNode(s, <span class="built_in">Math</span>.random() * gap * <span class="number">2</span> - gap, i * gap, <span class="literal">true</span>);</span><br><span class="line">    pattern.e.forEach(<span class="function"><span class="params">pair</span> =&gt;</span> addEdge(s, pair[<span class="number">0</span>], pair[<span class="number">1</span>]));</span><br><span class="line">    <span class="comment">// sigma.layouts.startForceLink(s, &#123;&#125;); // ForceLink has to be performed one by one</span></span><br><span class="line">    s.startForceAtlas2(&#123;&#125;); <span class="comment">// ForceAtlas2 is able to be performed simultaneously</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// sigma.layouts.stopForceLink();</span></span><br><span class="line">        <span class="comment">// sigma.layouts.killForceLink(); // must kill it!!!!</span></span><br><span class="line">        s.stopForceAtlas2(FORCE_ATLAS2_SETTINGS);</span><br><span class="line">        s.configNoverlap(&#123;&#125;);</span><br><span class="line">        s.startNoverlap();</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            rotateTofitContainer(s);</span><br><span class="line">            scaleTofitContainer(s);</span><br><span class="line">        &#125;, LAYOUT_RUN_TIME);</span><br><span class="line">    &#125;, LAYOUT_RUN_TIME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/1face4da/after-generate-patterns.png"><h3 id="添删点-边"><a class="markdownIt-Anchor" href="#添删点-边"></a> 添删点、边</h3><p>点击左键添加点和边，点击右键删除点或边。通过监听鼠标事件实现。</p><p>此外，右键是删除功能，需要屏蔽浏览器默认的右键菜单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ***************************** remove node *****************************</span></span><br><span class="line">$(<span class="string">'#board'</span>).parent().on(<span class="string">'contextmenu'</span>, (e) =&gt; &#123; <span class="comment">// disable right click menu on board</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'board contextmenu'</span>, e);</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">s.renderers[<span class="number">0</span>].bind(<span class="string">'rightClickNode'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rightClickNode'</span>, e);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'remove node '</span> + e.data.node.id);</span><br><span class="line">    <span class="keyword">if</span> (inActiveState(s, e.data.node.id)) &#123;</span><br><span class="line">        s.activeState.nodes().forEach(<span class="function"><span class="params">n</span> =&gt;</span> s.graph.dropNode(n.id));</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        s.graph.dropNode(e.data.node.id);</span><br><span class="line">    s.refresh();</span><br><span class="line">    <span class="comment">// fix bug: node remains after right click if mouse stays</span></span><br><span class="line">    $(<span class="string">'#board .sigma-mouse'</span>).hide();</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; $(<span class="string">'#board .sigma-mouse'</span>).show(); &#125;, <span class="number">50</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="选择-拖动图形"><a class="markdownIt-Anchor" href="#选择-拖动图形"></a> 选择、拖动图形</h3><p>组合使用了 Linkurious.js 的 <code>select</code>，<code>activeState</code>，<code>dragNodes</code> 插件实现基础功能。其中，同时拖动多个点的时候点的位置经常不准确（估计是插件的 bug），我只好重新计算点的坐标。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">s.dragListener.bind(<span class="string">'startdrag'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'dragNodes startdrag'</span>, e);</span><br><span class="line">    draggingNodes = &#123;&#125;;</span><br><span class="line">    draggingNodes[e.data.node.id] = [e.data.node.x, e.data.node.y];</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == s.activeState.nbNodes()) &#123;</span><br><span class="line">        beforeDragNodeId = s.activeState.nodes()[<span class="number">0</span>].id;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        beforeDragNodeId = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">if</span> (inActiveState(s, e.data.node.id) &amp;&amp; s.activeState.nbNodes() &gt; <span class="number">1</span>) &#123; <span class="comment">// fix bug of draging multiple nodes</span></span><br><span class="line">            draggingNodes = &#123;&#125;;</span><br><span class="line">            dragDx = [];</span><br><span class="line">            dragDy = [];</span><br><span class="line">            s.activeState.nodes().forEach(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">                draggingNodes[n.id] = [n.x, n.y];</span><br><span class="line">                dragDx.push(n.x - e.data.node.x);</span><br><span class="line">                dragDy.push(n.y - e.data.node.y);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>lasso</code> 插件提供了强大的多选工具：</p><img src="/posts/1face4da/lasso-select.png"><h3 id="添删标签label"><a class="markdownIt-Anchor" href="#添删标签label"></a> 添删标签（label）</h3><p>标签分组显示，用户选定点后，双击标签给点添加或更改标签；如果想取消标签，选中点后，点击 <code>Detach label</code> 按钮。</p><h3 id="添加-pattern"><a class="markdownIt-Anchor" href="#添加-pattern"></a> 添加 pattern</h3><p>用户可以通过拖动把 pattern 添加到主画板，我使用 <a href="http://jqueryui.com/draggable/" target="_blank" rel="noopener">jQuery UI Draggable</a> 实现拖动功能。自带的 <code>clone</code> 功能不能拷贝 <code>&lt;canvas&gt;</code>，所以我自己实现了拷贝 <code>&lt;canvas&gt;</code> 的功能，定义为插件的 <code>helper</code> 函数参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Allow users to drag a pattern into drawing board</span></span><br><span class="line"><span class="comment">  * Use jQuery Draggable plugin</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * @param   &#123;string&#125;    sourceClass Pattern type ('sigma-default-pattern-container' or 'sigma-generated-pattern-container')</span></span><br><span class="line"><span class="comment">  * @param   &#123;Sigma&#125;     s   Target drawing board</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enableDrag</span>(<span class="params">sourceClass, s</span>) </span>&#123;</span><br><span class="line">    $.each($(<span class="string">'.'</span> + sourceClass), (_, c) =&gt; &#123;</span><br><span class="line">        $(c).draggable(&#123;</span><br><span class="line">            <span class="comment">// deep clone canvas</span></span><br><span class="line">            <span class="comment">// it costs much time! QAQ</span></span><br><span class="line">            helper: <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> clone = $(e.currentTarget).clone();</span><br><span class="line">                clone.children(<span class="string">'canvas.sigma-scene'</span>)[<span class="number">0</span>].getContext(<span class="string">'2d'</span>).drawImage($(e.currentTarget).children(<span class="string">'canvas.sigma-scene'</span>)[<span class="number">0</span>], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> clone;</span><br><span class="line">            &#125;,</span><br><span class="line">            appendTo: <span class="string">'div.container-fluid'</span>,</span><br><span class="line">            scroll: <span class="literal">false</span>,</span><br><span class="line">            cursor: <span class="string">'move'</span>,</span><br><span class="line">            opacity: <span class="number">0.7</span>,</span><br><span class="line">            cursorAt: &#123; <span class="comment">// cursor at center</span></span><br><span class="line">                left: c.offsetWidth / <span class="number">2</span>,</span><br><span class="line">                top: c.offsetHeight / <span class="number">2</span></span><br><span class="line">            &#125;,</span><br><span class="line">            start: <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'dragstart'</span>, e);</span><br><span class="line">            &#125;,</span><br><span class="line">            stop: <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'dragstop'</span>, e);</span><br><span class="line">                <span class="keyword">let</span> rx = e.pageX - $(s.renderers[<span class="number">0</span>].container).offset().left;</span><br><span class="line">                <span class="keyword">let</span> ry = e.pageY - $(s.renderers[<span class="number">0</span>].container).offset().top;</span><br><span class="line">                <span class="keyword">if</span> (rx - c.offsetWidth / <span class="number">2</span> &gt; <span class="number">0</span> &amp;&amp; rx + c.offsetWidth / <span class="number">2</span> &lt; s.renderers[<span class="number">0</span>].container.offsetWidth</span><br><span class="line">                    &amp;&amp; ry - c.offsetHeight / <span class="number">2</span> &gt; <span class="number">0</span> &amp;&amp; ry + c.offsetHeight / <span class="number">2</span> &lt; s.renderers[<span class="number">0</span>].container.offsetHeight) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'add pattern'</span>);</span><br><span class="line">                    <span class="keyword">let</span> x = rx - s.sigmaMouse.offsetWidth / <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">let</span> y = ry - s.sigmaMouse.offsetHeight / <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">let</span> p = s.camera.cameraPosition(x, y);</span><br><span class="line">                    <span class="keyword">switch</span> (e.target.id) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'customized-hub-default-pattern'</span>:</span><br><span class="line">                            addPatternCenter = &#123; <span class="attr">x</span>: p.x, <span class="attr">y</span>: p.y &#125;;</span><br><span class="line">                            $(<span class="string">'#customized-hub-modal'</span>).modal(<span class="string">'show'</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'customized-ring-default-pattern'</span>:</span><br><span class="line">                            addPatternCenter = &#123; <span class="attr">x</span>: p.x, <span class="attr">y</span>: p.y &#125;;</span><br><span class="line">                            $(<span class="string">'#customized-ring-modal'</span>).modal(<span class="string">'show'</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            addPattern(s, $(e.target).data(<span class="string">'sigmaObject'</span>), p.x, p.y);</span><br><span class="line">                            scaleTillClear(s, s.activeState.nodes()); <span class="comment">// avoid node clique</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/1face4da/demo.png"><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><ol><li>Install <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li>Install Node.js packages via command <code>npm install</code></li><li>Start server via command <code>node app.js</code></li><li>Access web via <code>http://localhost:3000</code> or <code>http://&lt;your_server_ip&gt;:3000</code></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017 年 10 月～2018 年 3 月在南洋理工大学 DMAL 实验室做 RA，参与 Graph Mining 相关项目。这个项目做的是从图／网络里提取一定数量的 pattern，让用户能够方便地构造数据集相关的 query。这个项目的目标有别于别的相关工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pattern 对数据集有尽可能高的覆盖率&lt;/li&gt;
&lt;li&gt;pattern 间冗余度尽可能低&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;详细描述见导师发的文章 &lt;a href=&quot;http://www.vldb.org/pvldb/vol9/p984-bhowmick.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Data-driven Visual Graph Query Interface Construction and Maintenance: Challenges and Opportunities&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;到目前为止我已经实现了 pattern 提取的整个过程，接下来要做一些列实验和写论文。无论是实验或作品展示，都需要用户能够操作的 GUI 界面。但是实验室没有啊，怎么办？（其实实验室是有个用 Java Swing 做的半成品，Java 6 年代做的，研究了半天决定放弃）于是做数据挖掘的我又做起了熟悉的前端，前前后后花一个月做了出来。这篇文章介绍用 pattern 拼图的 GUI 界面实现（老板指定名字为 &lt;code&gt;AVATAR&lt;/code&gt;，忘了问缘由）。至于 pattern 提取算法，等文章发出来再做介绍吧。&lt;/p&gt;
&lt;img src=&quot;/posts/1face4da/demo.png&quot;&gt;
    
    </summary>
    
      <category term="Web 前端" scheme="https://bbappyuanyuan.github.io/categories/Web-%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://bbappyuanyuan.github.io/tags/JavaScript/"/>
    
      <category term="Sigma.js" scheme="https://bbappyuanyuan.github.io/tags/Sigma-js/"/>
    
      <category term="Linkurious.js" scheme="https://bbappyuanyuan.github.io/tags/Linkurious-js/"/>
    
  </entry>
  
  <entry>
    <title>基于 DWR + ActiveMQ 的 Web 端订阅消息推送</title>
    <link href="https://bbappyuanyuan.github.io/posts/acf8e3a0/"/>
    <id>https://bbappyuanyuan.github.io/posts/acf8e3a0/</id>
    <published>2017-05-25T06:24:00.000Z</published>
    <updated>2017-05-25T08:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于 Web 的消息订阅／发布系统可以分两部分考虑：一是使用什么工具搭建订阅／发布系统，二是如何进行 Web 前后端交互。</p><p>对于前者，业界很多 MQ 产品可以满足需求：<code>RabbitMQ</code>、<code>ActiveMQ</code>、<code>ZeroMQ</code> 等，本项目采用 <code>ActiveMQ</code>。关于 Web 前后端交互，目前最流行的技术可能是 HTML5 的 <code>WebSocket</code>，然而项目方要求兼容 IE8，因此只能寻求旧一点的技术，<code>DWR</code> 完全能满足项目的需求。</p><a id="more"></a><p>接下来介绍如何把这两种技术整合进基于 Spring + SpringMVC 的 Java Web 后台。</p><h2 id="activemq-整合"><a class="markdownIt-Anchor" href="#activemq-整合"></a> ActiveMQ 整合</h2><ol><li><p>引入 jar 包 <code>org.apache.activemq:activemq-spring:5.14.5</code></p></li><li><p>由于 Spring 驱动的 ActiveMQ 连接方式无法满足项目特定需求，我手动管理 <code>ActiveMQConnectionFactory</code>。在 <em>applicationContext-spring.xml</em> 定义 ActiveMQ 的连接工厂：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mqConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"$&#123;amq.brokerURL&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"$&#123;amq.username&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;amq.username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="dwr-整合"><a class="markdownIt-Anchor" href="#dwr-整合"></a> DWR 整合</h2><ol><li><p>引入 jar 包 <code>org.directwebremoting:dwr:3.0.2-RELEASE</code></p></li><li><p>根据官方文档把 DWR 整合进 Spring 和 SpringMVC，在 <em>web.xml</em> 添加 DWR 的 JavaScript 文件路径：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dwr/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <em>applicationContext-spring.xml</em> 添加 DWR 的 Servlet 配置：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DWR3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dwr:configuration</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dwr:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dwr:annotation-scan</span> <span class="attr">base-package</span>=<span class="string">"project.vo"</span> <span class="attr">scanDataTransferObject</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dwr:controller</span> <span class="attr">id</span>=<span class="string">"dwrController"</span> <span class="attr">debug</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dwr:config-param</span> <span class="attr">name</span>=<span class="string">"allowScriptTagRemoting"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dwr:config-param</span> <span class="attr">name</span>=<span class="string">"activeReverseAjaxEnabled"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dwr:config-param</span> <span class="attr">name</span>=<span class="string">"initApplicationScopeCreatorsAtStartup"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dwr:config-param</span> <span class="attr">name</span>=<span class="string">"maxWaitAfterWrite"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">value</span>=<span class="string">"3000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dwr:config-param</span> <span class="attr">name</span>=<span class="string">"crossDomainSessionSecurity"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dwr:config-param</span> <span class="attr">name</span>=<span class="string">"org.directwebremoting.extend.ScriptSessionManager"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">value</span>=<span class="string">"project.dwr.DWRScriptSessionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dwr:controller</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alwaysUseFullPath"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/dwr/**/*"</span>&gt;</span>dwrController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="业务需求实现"><a class="markdownIt-Anchor" href="#业务需求实现"></a> 业务需求实现</h2><ol><li><p>监控 DWR 的 ScriptSession 的生命周期：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> project.dwr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.directwebremoting.impl.DefaultScriptSessionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DWRScriptSessionManager</span> <span class="keyword">extends</span> <span class="title">DefaultScriptSessionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DWRScriptSessionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addScriptSessionListener(<span class="keyword">new</span> DWRScriptSessionListener());</span><br><span class="line">        System.out.println(<span class="string">"binded DWRScriptSessionListener."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为每个用户的连接绑定一个 ActiveMQ 的连接，用户离线后关闭连接：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> project.dwr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.directwebremoting.ScriptSession;</span><br><span class="line"><span class="keyword">import</span> org.directwebremoting.WebContext;</span><br><span class="line"><span class="keyword">import</span> org.directwebremoting.WebContextFactory;</span><br><span class="line"><span class="keyword">import</span> org.directwebremoting.event.ScriptSessionEvent;</span><br><span class="line"><span class="keyword">import</span> org.directwebremoting.event.ScriptSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageConsumer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DWRScriptSessionListener</span> <span class="keyword">implements</span> <span class="title">ScriptSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Connection&gt; amqConnectionPool = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pourAmqConnection</span><span class="params">(String sessionId, Connection connection)</span> </span>&#123;</span><br><span class="line">        amqConnectionPool.put(sessionId, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(ScriptSessionEvent event)</span> </span>&#123;</span><br><span class="line">        WebContext webContext = WebContextFactory.get();</span><br><span class="line">        HttpSession session = webContext.getSession();</span><br><span class="line">        ScriptSession scriptSession = event.getSession();</span><br><span class="line">        System.out.println(<span class="string">"session: "</span> + session.getId() + <span class="string">" scriptSession: "</span> + scriptSession.getId() + <span class="string">"is created!"</span>);</span><br><span class="line">        Connection connection = amqConnectionPool.get(session.getId());</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            scriptSession.setAttribute(<span class="string">"connection"</span>, connection);</span><br><span class="line">            amqConnectionPool.remove(session.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(ScriptSessionEvent event)</span> </span>&#123;</span><br><span class="line">        WebContext webContext = WebContextFactory.get();</span><br><span class="line">        HttpSession session = webContext.getSession();</span><br><span class="line">        ScriptSession scriptSession = event.getSession();</span><br><span class="line">        System.out.println(<span class="string">"session: "</span> + session.getId() + <span class="string">" scriptSession: "</span> + scriptSession.getId() + <span class="string">"is destroyed!"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection connection = (Connection) scriptSession.getAttribute(<span class="string">"connection"</span>);</span><br><span class="line">            Session jSession = (Session) scriptSession.getAttribute(<span class="string">"session"</span>);</span><br><span class="line">            MessageConsumer consumer = (MessageConsumer) scriptSession.getAttribute(<span class="string">"consumer"</span>);</span><br><span class="line">            <span class="keyword">if</span> (consumer != <span class="keyword">null</span>)</span><br><span class="line">                consumer.close();</span><br><span class="line">            <span class="keyword">if</span> (jSession != <span class="keyword">null</span>)</span><br><span class="line">                jSession.close();</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                connection.stop();</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>前端调用的入口程序，这里前端定义自己的用户名和订阅内容：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> project.dwr.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.directwebremoting.ScriptSession;</span><br><span class="line"><span class="keyword">import</span> org.directwebremoting.WebContextFactory;</span><br><span class="line"><span class="keyword">import</span> org.directwebremoting.annotations.RemoteMethod;</span><br><span class="line"><span class="keyword">import</span> org.directwebremoting.annotations.RemoteProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RemoteProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DWRService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RemoteMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String clientId, String subscriptions)</span> </span>&#123;</span><br><span class="line">        ScriptSession scriptSession = WebContextFactory.get().getScriptSession();</span><br><span class="line">        Connection connection = (Connection) scriptSession.getAttribute(<span class="string">"connection"</span>);</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span> &amp;&amp; !subscriptions.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.setClientID(clientId);</span><br><span class="line">                connection.start();</span><br><span class="line">                Session session = connection.createSession(<span class="keyword">false</span>,</span><br><span class="line">                        Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">                Destination destination = session.createTopic(subscriptions);</span><br><span class="line">                MessageConsumer consumer = session.createConsumer(destination);</span><br><span class="line">                consumer.setMessageListener(<span class="keyword">new</span> DWRMessageListener(scriptSession));</span><br><span class="line">                System.out.println(<span class="string">"["</span> + clientId + <span class="string">"] ("</span> + subscriptions + <span class="string">") connected."</span>);</span><br><span class="line">                scriptSession.setAttribute(<span class="string">"consumer"</span>, consumer);</span><br><span class="line">                scriptSession.setAttribute(<span class="string">"session"</span>, session);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>前端入口程序为：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"dwr/engine.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"dwr/util.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"dwr/interface/DWRService.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        dwr.engine.setActiveReverseAjax(<span class="literal">true</span>);</span><br><span class="line">        dwr.engine.setNotifyServerOnPageUnload(<span class="literal">true</span>);</span><br><span class="line">        DWRService.connect(<span class="string">"&lt;%=user.getUsername()%&gt;-"</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString(), generateTopicsDestination());</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>DWRMessageListener</em> 获取到 MQ 发布的消息后，通过 DWR 的 <code>反向 Ajax</code> 机制通知前端（传递消息并执行前端函数），目前前端控制还没完成，用 console.log 函数替代。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> project.dwr.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> project.vo.TopicMessage;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.command.ActiveMQTextMessage;</span><br><span class="line"><span class="keyword">import</span> org.directwebremoting.ScriptBuffer;</span><br><span class="line"><span class="keyword">import</span> org.directwebremoting.ScriptSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DWRMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScriptSession scriptSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DWRMessageListener</span><span class="params">(ScriptSession scriptSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.scriptSession = scriptSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> TextMessage) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String client = ((Connection) scriptSession.getAttribute(<span class="string">"connection"</span>)).getClientID();</span><br><span class="line">                String topic = ((ActiveMQTextMessage) message).getDestination().getPhysicalName();</span><br><span class="line">                String text = ((TextMessage) message).getText();</span><br><span class="line">                System.out.println(<span class="string">"["</span> + client + <span class="string">"] received ["</span> + topic + <span class="string">"] "</span> + text);</span><br><span class="line">                ScriptBuffer scriptBuffer = <span class="keyword">new</span> ScriptBuffer();</span><br><span class="line">                scriptBuffer.appendCall(<span class="string">"console.log"</span>, <span class="keyword">new</span> TopicMessage(topic, text));</span><br><span class="line">                scriptSession.addScript(scriptBuffer);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于 Web 的消息订阅／发布系统可以分两部分考虑：一是使用什么工具搭建订阅／发布系统，二是如何进行 Web 前后端交互。&lt;/p&gt;
&lt;p&gt;对于前者，业界很多 MQ 产品可以满足需求：&lt;code&gt;RabbitMQ&lt;/code&gt;、&lt;code&gt;ActiveMQ&lt;/code&gt;、&lt;code&gt;ZeroMQ&lt;/code&gt; 等，本项目采用 &lt;code&gt;ActiveMQ&lt;/code&gt;。关于 Web 前后端交互，目前最流行的技术可能是 HTML5 的 &lt;code&gt;WebSocket&lt;/code&gt;，然而项目方要求兼容 IE8，因此只能寻求旧一点的技术，&lt;code&gt;DWR&lt;/code&gt; 完全能满足项目的需求。&lt;/p&gt;
    
    </summary>
    
      <category term="Java Web" scheme="https://bbappyuanyuan.github.io/categories/Java-Web/"/>
    
    
      <category term="DWR" scheme="https://bbappyuanyuan.github.io/tags/DWR/"/>
    
      <category term="ActiveMQ" scheme="https://bbappyuanyuan.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>向 HTML 表格添加选择框列筛选器</title>
    <link href="https://bbappyuanyuan.github.io/posts/721dda82/"/>
    <id>https://bbappyuanyuan.github.io/posts/721dda82/</id>
    <published>2017-05-12T11:24:13.000Z</published>
    <updated>2017-05-13T07:34:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>在表格的某些列添加筛选器有助于数据分析，在生物数据里这个功能尤其重要。今天在项目的基因表达数据表实现了这个功能。</p><h2 id="使用-datatables-自带例子"><a class="markdownIt-Anchor" href="#使用-datatables-自带例子"></a> 使用 DataTables 自带例子</h2><p><a href="https://www.datatables.net/" target="_blank" rel="noopener">DataTables</a> 是特别实用的 jQuery 表格插件，官方文档介绍了添加列筛选器的方式（详见 <a href="https://www.datatables.net/release-datatables/examples/api/multi_filter_select.html" target="_blank" rel="noopener">https://www.datatables.net/release-datatables/examples/api/multi_filter_select.html</a>）：</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#example'</span>).DataTable( &#123;</span><br><span class="line">        initComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.api().columns().every( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> column = <span class="keyword">this</span>;</span><br><span class="line">                <span class="keyword">var</span> select = $(<span class="string">'&lt;select&gt;&lt;option value=""&gt;&lt;/option&gt;&lt;/select&gt;'</span>)</span><br><span class="line">                    .appendTo( $(column.footer()).empty() )</span><br><span class="line">                    .on( <span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> val = $.fn.dataTable.util.escapeRegex(</span><br><span class="line">                            $(<span class="keyword">this</span>).val()</span><br><span class="line">                        );</span><br><span class="line"> </span><br><span class="line">                        column</span><br><span class="line">                            .search( val ? <span class="string">'^'</span>+val+<span class="string">'$'</span> : <span class="string">''</span>, <span class="literal">true</span>, <span class="literal">false</span> )</span><br><span class="line">                            .draw();</span><br><span class="line">                    &#125; );</span><br><span class="line"> </span><br><span class="line">                column.data().unique().sort().each( <span class="function"><span class="keyword">function</span> (<span class="params"> d, j </span>) </span>&#123;</span><br><span class="line">                    select.append( <span class="string">'&lt;option value="'</span>+d+<span class="string">'"&gt;'</span>+d+<span class="string">'&lt;/option&gt;'</span> )</span><br><span class="line">                &#125; );</span><br><span class="line">            &#125; );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>其原理是在表格的 <code>&lt;tfoot&gt;</code> 标签里放置 <code>&lt;select&gt;</code> 并添加 search 功能，实际使用时给 <code>&lt;tfoot&gt;</code> 加入样式 <code>display: table-header-group</code> 即可满足需求。</p><p>效果图：</p><img src="/posts/721dda82/screenshot.jpg" title="效果图"><h2 id="手写实现前置的-tfoot-标签"><a class="markdownIt-Anchor" href="#手写实现前置的-tfoot-标签"></a> 手写实现前置的 tfoot 标签</h2><p>经过测试，<code>Chrome</code>、<code>Firefox</code> 正常显示预期效果，然而 <code>IE</code> 和 <code>EDGE</code> 浏览器始终把 <code>&lt;tfoot&gt;</code> 标签放置于 <code>&lt;tbody&gt;</code> 下面 (╯°Д°)╯︵ ┻━┻ 接着花了很长时间 google 也没找到解决方法，面对硬性的需求，只好硬着头皮尝试。</p><p>具体做法：</p><ol><li>在 <code>&lt;thead&gt;</code> 标签里新建一个 <code>&lt;tr&gt;</code> 标签。</li><li>构建 DataTables 后调换 <code>&lt;thead&gt;</code> 把新建的标签提前。</li><li>手动处理 <code>DataTables</code> 的 column visibility 设置。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">generateIETfoot(<span class="string">'table2'</span>);</span><br><span class="line"><span class="keyword">var</span> numColumns = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> statusColumns = [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>];</span><br><span class="line">$(<span class="string">'#table2'</span>).DataTable(&#123;</span><br><span class="line">    <span class="string">"columnDefs"</span>: [&#123;</span><br><span class="line">        <span class="string">"targets"</span>: t,</span><br><span class="line">        <span class="string">"visible"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"searchable"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">"lengthMenu"</span>: [[<span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">-1</span>], [<span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="string">"All"</span>]],</span><br><span class="line">    <span class="string">"pageLength"</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">"initComplete"</span>: columnFilterGeneratorFunction(<span class="string">'table2'</span>, numColumns, statusColumns)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateIETfoot</span>(<span class="params">tableName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> IETfoot = $(<span class="string">'&lt;tr&gt;&lt;/tr&gt;'</span>).prependTo($(<span class="string">'#'</span> + tableName + <span class="string">' thead'</span>));</span><br><span class="line">    $(<span class="string">'#'</span> + tableName + <span class="string">' thead tr:eq(1) th'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        IETfoot.append($(<span class="string">'&lt;th&gt;&lt;select style="width: 85%; min-width: 90px"&gt;&lt;option value=""&gt;-- filter --&lt;/option&gt;&lt;/select&gt;&lt;/th&gt;'</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> IETfoot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">columnFilterGeneratorFunction</span>(<span class="params">tableName, numColumns, statusColumns</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> IETfoot = $(<span class="string">'#'</span> + tableName + <span class="string">' thead tr:eq(0)'</span>);</span><br><span class="line">        IETfoot.appendTo($(<span class="string">'#'</span> + tableName + <span class="string">' thead'</span>));</span><br><span class="line">        <span class="keyword">var</span> IEThCnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.api().columns().every(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> column = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">if</span> (column.visible()) &#123;</span><br><span class="line">                <span class="keyword">var</span> select = IETfoot.find(<span class="string">'th:eq('</span> + IEThCnt++ + <span class="string">') &gt; select'</span>)</span><br><span class="line">                    .on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> val = $.fn.dataTable.util.escapeRegex(</span><br><span class="line">                            $(<span class="keyword">this</span>).val()</span><br><span class="line">                        );</span><br><span class="line"></span><br><span class="line">                        column</span><br><span class="line">                            .search(val ? <span class="string">'^'</span> + val + <span class="string">'$'</span> : <span class="string">''</span>, <span class="literal">true</span>, <span class="literal">false</span>)</span><br><span class="line">                            .draw();</span><br><span class="line">                    &#125;);</span><br><span class="line">                <span class="keyword">if</span> (numColumns.indexOf(i) != <span class="number">-1</span>)</span><br><span class="line">                    column.data().unique().sort(numComparer).each(<span class="function"><span class="keyword">function</span> (<span class="params">d, j</span>) </span>&#123;</span><br><span class="line">                        select.append(<span class="string">'&lt;option value="'</span> + d + <span class="string">'"&gt;'</span> + d + <span class="string">'&lt;/option&gt;'</span>)</span><br><span class="line">                    &#125;);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (statusColumns.indexOf(i) != <span class="number">-1</span>)</span><br><span class="line">                    column.data().unique().sort(statusComparer).each(<span class="function"><span class="keyword">function</span> (<span class="params">d, j</span>) </span>&#123;</span><br><span class="line">                        select.append(<span class="string">'&lt;option value="'</span> + d + <span class="string">'"&gt;'</span> + d + <span class="string">'&lt;/option&gt;'</span>)</span><br><span class="line">                    &#125;);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    column.data().unique().sort().each(<span class="function"><span class="keyword">function</span> (<span class="params">d, j</span>) </span>&#123;</span><br><span class="line">                        select.append(<span class="string">'&lt;option value="'</span> + d + <span class="string">'"&gt;'</span> + d + <span class="string">'&lt;/option&gt;'</span>)</span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在表格的某些列添加筛选器有助于数据分析，在生物数据里这个功能尤其重要。今天在项目的基因表达数据表实现了这个功能。&lt;/p&gt;
&lt;h2 id=&quot;使用-datatables-自带例子&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#使用-datatables-自带例子&quot;&gt;&lt;/a&gt; 使用 DataTables 自带例子&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.datatables.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DataTables&lt;/a&gt; 是特别实用的 jQuery 表格插件，官方文档介绍了添加列筛选器的方式（详见 &lt;a href=&quot;https://www.datatables.net/release-datatables/examples/api/multi_filter_select.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.datatables.net/release-datatables/examples/api/multi_filter_select.html&lt;/a&gt;）：&lt;/p&gt;
    
    </summary>
    
      <category term="Web 前端" scheme="https://bbappyuanyuan.github.io/categories/Web-%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="DataTables" scheme="https://bbappyuanyuan.github.io/tags/DataTables/"/>
    
      <category term="JavaScript" scheme="https://bbappyuanyuan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode「Hard」问题题解（201～300）</title>
    <link href="https://bbappyuanyuan.github.io/posts/b57866e8/"/>
    <id>https://bbappyuanyuan.github.io/posts/b57866e8/</id>
    <published>2017-01-01T06:04:00.000Z</published>
    <updated>2017-01-01T06:04:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="212-word-search-ii"><a class="markdownIt-Anchor" href="#212-word-search-ii"></a> <a href="https://leetcode.com/problems/word-search-ii" target="_blank" rel="noopener">212. Word Search II</a></h2><p>对单词表建立 Trie 树，<code>dfs</code> 暴力搜索。</p><a id="more"></a><p>运行时间 <code>62 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">        <span class="built_in">string</span> word;</span><br><span class="line">        <span class="built_in">vector</span>&lt;Node*&gt; next;</span><br><span class="line">        </span><br><span class="line">        Node() &#123;</span><br><span class="line">            word = <span class="string">""</span>;</span><br><span class="line">            next = <span class="built_in">vector</span>&lt;Node*&gt;(<span class="number">26</span>, <span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    Node *root = <span class="keyword">new</span> Node();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rush</span><span class="params">(Node *cur, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board[x][y] == <span class="string">'$'</span> || cur-&gt;next[board[x][y] - <span class="string">'a'</span>] == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        cur = cur-&gt;next[board[x][y] - <span class="string">'a'</span>];</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;word != <span class="string">""</span>) &#123;</span><br><span class="line">            ans.push_back(cur-&gt;word);</span><br><span class="line">            cur-&gt;word = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> c = board[x][y];</span><br><span class="line">        board[x][y] = <span class="string">'$'</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span>) rush(cur, x - <span class="number">1</span>, y, board);</span><br><span class="line">        <span class="keyword">if</span> (x + <span class="number">1</span> &lt; n) rush(cur, x + <span class="number">1</span>, y, board);</span><br><span class="line">        <span class="keyword">if</span> (y &gt; <span class="number">0</span>) rush(cur, x, y - <span class="number">1</span>, board);</span><br><span class="line">        <span class="keyword">if</span> (y + <span class="number">1</span> &lt; m) rush(cur, x, y + <span class="number">1</span>, board);</span><br><span class="line">        board[x][y] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; findWords(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words) &#123;</span><br><span class="line">        n = board.size();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        m = board[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> word : words) &#123;</span><br><span class="line">            <span class="keyword">auto</span> x = root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c : word) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x-&gt;next[c - <span class="string">'a'</span>] == <span class="literal">NULL</span>)</span><br><span class="line">                    x-&gt;next[c - <span class="string">'a'</span>] = <span class="keyword">new</span> Node();</span><br><span class="line">                x = x-&gt;next[c - <span class="string">'a'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            x-&gt;word = word;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                rush(root, i, j, board);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="214-shortest-palindrome"><a class="markdownIt-Anchor" href="#214-shortest-palindrome"></a> <a href="https://leetcode.com/problems/shortest-palindrome" target="_blank" rel="noopener">214. Shortest Palindrome</a></h2><h3 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一</h3><p>问题为求最长的回文前缀。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>42 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">my_reverse</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        reverse(s.begin(), s.end());</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">shortestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">string</span> rs = my_reverse(s);</span><br><span class="line">        <span class="built_in">string</span> front = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> max1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (n + <span class="number">1</span>) / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (front == rs.substr(n - <span class="number">1</span> - i - i, i))</span><br><span class="line">                max1 = i;</span><br><span class="line">            front += s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> max2 = <span class="number">0</span>;</span><br><span class="line">        front = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (front == rs.substr(n - i - i, i))</span><br><span class="line">                max2 = i;</span><br><span class="line">            front += s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (max1 &gt;= max2)</span><br><span class="line">            <span class="keyword">return</span> my_reverse(s.substr(max1 + <span class="number">1</span>)) + s[max1] + s.substr(max1 + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> my_reverse(s.substr(max2)) + s.substr(max2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二</h3><p>思路同方法一，使用高效的<code>KMP 算法</code>解决。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>9 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">shortestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="built_in">string</span> rs = s;</span><br><span class="line">        reverse(rs.begin(), rs.end());</span><br><span class="line">        <span class="built_in">string</span> f = s + <span class="string">"$"</span> + rs;</span><br><span class="line">        <span class="keyword">int</span> l = f.length();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; match(l, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; l; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; f[j] != f[i])</span><br><span class="line">                j = match[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (f[j] == f[i]) ++j;</span><br><span class="line">            match[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rs.substr(<span class="number">0</span>, n - match[l - <span class="number">1</span>]) + s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="218-the-skyline-problem"><a class="markdownIt-Anchor" href="#218-the-skyline-problem"></a> <a href="https://leetcode.com/problems/the-skyline-problem" target="_blank" rel="noopener">218. The Skyline Problem</a></h2><p>从左到右扫描，记录当前的覆盖情况，使用 <code>STL</code> 库的 <code>multiset</code> 维护当前的最高覆盖。</p><p>时间复杂度 <code>O(n * log(n))</code>，运行时间 <code>23 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; bs;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; getSkyline(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; buildings) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (buildings.size() == <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> b : buildings) &#123;</span><br><span class="line">            l.push_back(&#123;b[<span class="number">0</span>], b[<span class="number">2</span>]&#125;);</span><br><span class="line">            l.push_back(&#123;b[<span class="number">1</span>], -b[<span class="number">2</span>]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(l.begin(), l.end());</span><br><span class="line">        bs.insert(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> pb = l[<span class="number">0</span>].first, ph = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> b : l) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b.first != pb) &#123;</span><br><span class="line">                <span class="keyword">if</span> (*bs.rbegin() != ph) &#123;</span><br><span class="line">                    ans.push_back(&#123;pb, *bs.rbegin()&#125;);</span><br><span class="line">                    ph = *bs.rbegin();</span><br><span class="line">                &#125;</span><br><span class="line">                pb = b.first;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (b.second &gt; <span class="number">0</span>)</span><br><span class="line">                bs.insert(b.second);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                bs.erase(bs.find(-b.second));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ph != <span class="number">0</span>) ans.push_back(&#123;l[l.size() - <span class="number">1</span>].first, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="224-basic-calculator"><a class="markdownIt-Anchor" href="#224-basic-calculator"></a> <a href="https://leetcode.com/problems/basic-calculator" target="_blank" rel="noopener">224. Basic Calculator</a></h2><p>建立两个栈分别存储数字和符号。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>16 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; sign;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (sign.top() != <span class="string">'('</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> b = num.top(); num.pop();</span><br><span class="line">            <span class="keyword">int</span> a = num.top(); num.pop();</span><br><span class="line">            <span class="keyword">char</span> c = sign.top(); sign.pop();</span><br><span class="line">            num.push(c == <span class="string">'+'</span> ? a + b : a - b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="string">""</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> it = s.begin();</span><br><span class="line">        sign.push(<span class="string">'('</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (it != s.end() &amp;&amp; *it == <span class="string">' '</span>) ++it;</span><br><span class="line">            <span class="keyword">if</span> (it == s.end()) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (*it == <span class="string">'('</span>) &#123;</span><br><span class="line">                sign.push(<span class="string">'('</span>);</span><br><span class="line">                ++it;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (*it == <span class="string">')'</span>) &#123;</span><br><span class="line">                sign.pop();</span><br><span class="line">                calc();</span><br><span class="line">                ++it;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (*it == <span class="string">'+'</span> || *it == <span class="string">'-'</span>)</span><br><span class="line">                sign.push(*it++);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (it != s.end() &amp;&amp; *it &gt;= <span class="string">'0'</span> &amp;&amp; *it &lt;= <span class="string">'9'</span>)</span><br><span class="line">                    a = a * <span class="number">10</span> + (*it++ - <span class="string">'0'</span>);</span><br><span class="line">                num.push(a);</span><br><span class="line">                calc();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num.top();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="233-number-of-digit-one"><a class="markdownIt-Anchor" href="#233-number-of-digit-one"></a> <a href="https://leetcode.com/problems/number-of-digit-one" target="_blank" rel="noopener">233. Number of Digit One</a></h2><p>按位统计。</p><p>时间复杂度 <code>O(1)</code>，运行时间 <code>0 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countDigitOne</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>, x = n, pp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            pp *= <span class="number">10</span>;</span><br><span class="line">            p.push_back(pp);</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            ++k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> greater = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> d = n / p[i] % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">int</span> l = n / p[i] / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">int</span> r = n % p[i];</span><br><span class="line">            ans += l * p[i];</span><br><span class="line">            <span class="keyword">if</span> (d == <span class="number">1</span>) ans += r + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (d &gt; <span class="number">1</span>) ans += p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="239-sliding-window-maximum"><a class="markdownIt-Anchor" href="#239-sliding-window-maximum"></a> <a href="https://leetcode.com/problems/sliding-window-maximum" target="_blank" rel="noopener">239. Sliding Window Maximum</a></h2><p>维护递减的单调队列。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>69 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; maxSlidingWindow(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!s.empty() &amp;&amp; s.front() &lt;= i - k) s.pop_front();</span><br><span class="line">            <span class="keyword">while</span> (!s.empty() &amp;&amp; nums[s.back()] &lt;= nums[i])</span><br><span class="line">                s.pop_back();</span><br><span class="line">            s.push_back(i);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>)</span><br><span class="line">                ans.push_back(nums[s.front()]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="273-integer-to-english-words"><a class="markdownIt-Anchor" href="#273-integer-to-english-words"></a> <a href="https://leetcode.com/problems/integer-to-english-words" target="_blank" rel="noopener">273. Integer to English Words</a></h2><p>时间复杂度 <code>O(1)</code>，运行时间 <code>3 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">string</span> BELOW20[<span class="number">20</span>] = &#123;<span class="string">""</span>, <span class="string">"One"</span>, <span class="string">"Two"</span>, <span class="string">"Three"</span>, <span class="string">"Four"</span>,<span class="string">"Five"</span>,<span class="string">"Six"</span>,<span class="string">"Seven"</span>,<span class="string">"Eight"</span>,<span class="string">"Nine"</span>,<span class="string">"Ten"</span>, <span class="string">"Eleven"</span>,<span class="string">"Twelve"</span>,<span class="string">"Thirteen"</span>,<span class="string">"Fourteen"</span>,<span class="string">"Fifteen"</span>,<span class="string">"Sixteen"</span>,<span class="string">"Seventeen"</span>,<span class="string">"Eighteen"</span>,<span class="string">"Nineteen"</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">string</span> BELOW100[<span class="number">10</span>] = &#123;<span class="string">""</span>, <span class="string">""</span>, <span class="string">"Twenty"</span>, <span class="string">"Thirty"</span>, <span class="string">"Forty"</span>, <span class="string">"Fifty"</span>, <span class="string">"Sixty"</span>, <span class="string">"Seventy"</span>, <span class="string">"Eighty"</span>, <span class="string">"Ninety"</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">trans</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">string</span> prefix, <span class="built_in">string</span> suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="built_in">string</span> ret;</span><br><span class="line">        <span class="keyword">if</span> (n &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">            ret += <span class="string">" "</span> + BELOW20[n / <span class="number">100</span>] + <span class="string">" Hundred"</span>;</span><br><span class="line">            n %= <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">            ret += <span class="string">" "</span> + BELOW100[n / <span class="number">10</span>];</span><br><span class="line">            n %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n)</span><br><span class="line">            ret += <span class="string">" "</span> + BELOW20[n];</span><br><span class="line">        ret = prefix + ret.substr(<span class="number">1</span>) + suffix;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">numberToWords</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"Zero"</span>;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">1000</span>) <span class="keyword">return</span> trans(num, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">1000000</span>) <span class="keyword">return</span> trans(num / <span class="number">1000</span>, <span class="string">""</span>, <span class="string">" Thousand"</span>) + trans(num % <span class="number">1000</span>, <span class="string">" "</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">1000000000</span>) <span class="keyword">return</span> trans(num / <span class="number">1000000</span>, <span class="string">""</span>, <span class="string">" Million"</span>) + trans(num / <span class="number">1000</span> % <span class="number">1000</span>, <span class="string">" "</span>, <span class="string">" Thousand"</span>) + trans(num % <span class="number">1000</span>, <span class="string">" "</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> trans(num / <span class="number">1000000000</span>, <span class="string">""</span>, <span class="string">" Billion"</span>) + trans(num / <span class="number">1000000</span> % <span class="number">1000</span>, <span class="string">" "</span>, <span class="string">" Million"</span>) + trans(num / <span class="number">1000</span> % <span class="number">1000</span>, <span class="string">" "</span>, <span class="string">" Thousand"</span>) + trans(num % <span class="number">1000</span>, <span class="string">" "</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="282-expression-add-operators"><a class="markdownIt-Anchor" href="#282-expression-add-operators"></a> <a href="https://leetcode.com/problems/expression-add-operators" target="_blank" rel="noopener">282. Expression Add Operators</a></h2><p><code>dfs</code> 搜索，使用「撤回」的方式处理 <code>*</code> 和 <code>+ -</code> 的优先级问题，搜索过程中记录最近一次的 <code>+ -</code> 运算。</p><p>变量说明：</p><ul><li><code>res</code> – 当前表达式结果</li><li><code>last_v</code> – 最近一次 <code>+ -</code> 运算的数值</li><li><code>last_sign</code> – 最近一次 <code>+ -</code> 运算的符号</li><li><code>fml</code> – 当前表达式</li></ul><p>运行时间 <code>123 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;num, <span class="keyword">int</span> p, <span class="keyword">int</span> n, <span class="keyword">const</span> <span class="keyword">int</span> &amp;target, <span class="keyword">long</span> <span class="keyword">long</span> res, <span class="keyword">long</span> <span class="keyword">long</span> last_v, <span class="keyword">char</span> last_sign, <span class="built_in">string</span> fml)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p == n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res == (<span class="keyword">long</span> <span class="keyword">long</span>) target)</span><br><span class="line">                ans.push_back(fml);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> sx = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i &lt; n; ++i) &#123;</span><br><span class="line">            x = x * <span class="number">10</span> + (num[i] - <span class="string">'0'</span>);</span><br><span class="line">            sx += num[i];</span><br><span class="line">            <span class="keyword">if</span> (i &gt; p &amp;&amp; num[p] == <span class="string">'0'</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (last_sign == <span class="string">'$'</span>) &#123;</span><br><span class="line">                dfs(num, i + <span class="number">1</span>, n, target, x, x, <span class="string">'+'</span>, sx);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dfs(num, i + <span class="number">1</span>, n, target, res + x, x, <span class="string">'+'</span>, fml + <span class="string">'+'</span> + sx);</span><br><span class="line">                dfs(num, i + <span class="number">1</span>, n, target, res - x, x, <span class="string">'-'</span>, fml + <span class="string">'-'</span> + sx);</span><br><span class="line">                <span class="keyword">if</span> (last_sign == <span class="string">'+'</span>)</span><br><span class="line">                    dfs(num, i + <span class="number">1</span>, n, target, res - last_v + last_v * x, last_v * x, <span class="string">'+'</span>, fml + <span class="string">'*'</span> + sx);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dfs(num, i + <span class="number">1</span>, n, target, res + last_v - last_v * x, last_v * x, <span class="string">'-'</span>, fml + <span class="string">'*'</span> + sx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; addOperators(<span class="built_in">string</span> num, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = num.length();</span><br><span class="line">        dfs(num, <span class="number">0</span>, n, target, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'$'</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="295-find-median-from-data-stream"><a class="markdownIt-Anchor" href="#295-find-median-from-data-stream"></a> <a href="https://leetcode.com/problems/find-median-from-data-stream" target="_blank" rel="noopener">295. Find Median from Data Stream</a></h2><h3 id="方法一-2"><a class="markdownIt-Anchor" href="#方法一-2"></a> 方法一</h3><p>建立二叉搜索树，维护中位数相关的两元素的指针。</p><p>运行时间 <code>213 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MedianFinder</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; s;</span><br><span class="line">    <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;::iterator a, b;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    MedianFinder() &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> x = make_pair(num, ++size);</span><br><span class="line">        s.insert(x);</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">            b = s.begin();</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">2</span>) &#123;</span><br><span class="line">            a = b = s.begin();</span><br><span class="line">            ++b;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (size &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; *a) &#123;</span><br><span class="line">                b = a;</span><br><span class="line">                --a;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (*a &lt; x &amp;&amp; x &lt; *b) &#123;</span><br><span class="line">                --b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (*a &lt; x &amp;&amp; x &lt; *b) &#123;</span><br><span class="line">                ++a;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (x &gt; *b) &#123;</span><br><span class="line">                a = b;</span><br><span class="line">                ++b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size &amp; <span class="number">1</span> ? b-&gt;first : (a-&gt;first + b-&gt;first) * <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MedianFinder object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MedianFinder obj = new MedianFinder();</span></span><br><span class="line"><span class="comment"> * obj.addNum(num);</span></span><br><span class="line"><span class="comment"> * double param_2 = obj.findMedian();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="方法二-2"><a class="markdownIt-Anchor" href="#方法二-2"></a> 方法二</h3><p>维护两个堆，一个大根堆和一个小根堆，大根堆存最小的一半元素，小根堆存另一半元素，中位数可由两个堆的堆顶计算得出。</p><p>运行时间 <code>176 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MedianFinder</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>&gt; small, large;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    MedianFinder() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        small.push(num);</span><br><span class="line">        large.push(-small.top());</span><br><span class="line">        small.pop();</span><br><span class="line">        <span class="keyword">if</span> (small.size() &lt; large.size()) &#123;</span><br><span class="line">            small.push(-large.top());</span><br><span class="line">            large.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> small.size() &gt; large.size() ? small.top() : (small.top() - large.top()) * <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MedianFinder object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MedianFinder obj = new MedianFinder();</span></span><br><span class="line"><span class="comment"> * obj.addNum(num);</span></span><br><span class="line"><span class="comment"> * double param_2 = obj.findMedian();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="297-serialize-and-deserialize-binary-tree"><a class="markdownIt-Anchor" href="#297-serialize-and-deserialize-binary-tree"></a> <a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree" target="_blank" rel="noopener">297. Serialize and Deserialize Binary Tree</a></h2><p>前序遍历。</p><p>运行时间 <code>79 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> my_data;</span><br><span class="line">    </span><br><span class="line">    <span class="function">TreeNode* <span class="title">my_deserialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d = my_data.find_first_of(<span class="string">','</span>);</span><br><span class="line">        <span class="keyword">auto</span> cur = my_data.substr(<span class="number">0</span>, d);</span><br><span class="line">        my_data.erase(<span class="number">0</span>, d + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="string">"null"</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">auto</span> ret = <span class="keyword">new</span> TreeNode(stoi(cur));</span><br><span class="line">        ret-&gt;left = my_deserialize();</span><br><span class="line">        ret-&gt;right = my_deserialize();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="string">"null,"</span>;</span><br><span class="line">        <span class="keyword">return</span> to_string(root-&gt;val) + <span class="string">','</span> + serialize(root-&gt;left) + serialize(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(<span class="built_in">string</span> data)</span> </span>&#123;</span><br><span class="line">        my_data = data;</span><br><span class="line">        <span class="keyword">return</span> my_deserialize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec codec;</span></span><br><span class="line"><span class="comment">// codec.deserialize(codec.serialize(root));</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;212-word-search-ii&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#212-word-search-ii&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://leetcode.com/problems/word-search-ii&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;212. Word Search II&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对单词表建立 Trie 树，&lt;code&gt;dfs&lt;/code&gt; 暴力搜索。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://bbappyuanyuan.github.io/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode「Hard」问题题解（101～200）</title>
    <link href="https://bbappyuanyuan.github.io/posts/9ba67bd/"/>
    <id>https://bbappyuanyuan.github.io/posts/9ba67bd/</id>
    <published>2017-01-01T06:03:00.000Z</published>
    <updated>2017-01-01T06:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="115-distinct-subsequences"><a class="markdownIt-Anchor" href="#115-distinct-subsequences"></a> <a href="https://leetcode.com/problems/distinct-subsequences" target="_blank" rel="noopener">115. Distinct Subsequences</a></h2><p>动态规划，f[i][j] 表示 S 的前 i 位形成 T 的前 j 位的子序列的数目。</p><a id="more"></a><p>时间复杂度 <code>O(m * n)</code>，运行时间 <code>19 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numDistinct</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length(), m = t.length();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; f(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m + <span class="number">2</span>));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                f[i + <span class="number">1</span>][j] += f[i][j];</span><br><span class="line">                <span class="keyword">if</span> (s[i] == t[j])</span><br><span class="line">                    f[i + <span class="number">1</span>][j + <span class="number">1</span>] += f[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n][m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="123-best-time-to-buy-and-sell-stock-iii"><a class="markdownIt-Anchor" href="#123-best-time-to-buy-and-sell-stock-iii"></a> <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii" target="_blank" rel="noopener">123. Best Time to Buy and Sell Stock III</a></h2><p>枚举切分点，把股票分成前后两段，计算前后两段中单次买卖获得的最大收益。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>15 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.size();</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; h(n);</span><br><span class="line">        h[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> _min = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &lt; _min) _min = prices[i];</span><br><span class="line">            h[i] = max(h[i - <span class="number">1</span>], prices[i] - _min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> _max = prices[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &gt; _max) _max = prices[i];</span><br><span class="line">            t = max(t, _max - prices[i]);</span><br><span class="line">            ans = max(ans, h[i] + t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="124-binary-tree-maximum-path-sum"><a class="markdownIt-Anchor" href="#124-binary-tree-maximum-path-sum"></a> <a href="https://leetcode.com/problems/binary-tree-maximum-path-sum" target="_blank" rel="noopener">124. Binary Tree Maximum Path Sum</a></h2><p><code>dfs</code> 遍历树，<code>run(x)</code> 函数返回结果为以结点 x 开头的向下延伸的链的最大路径和。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>35 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">run</span><span class="params">(TreeNode* x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = run(x-&gt;left);</span><br><span class="line">        <span class="keyword">int</span> r = run(x-&gt;right);</span><br><span class="line">        <span class="keyword">int</span> ret = x-&gt;val;</span><br><span class="line">        <span class="keyword">if</span> (l + x-&gt;val &gt; ret)</span><br><span class="line">            ret = l + x-&gt;val;</span><br><span class="line">        <span class="keyword">if</span> (r + x-&gt;val &gt; ret)</span><br><span class="line">            ret = r + x-&gt;val;</span><br><span class="line">        <span class="keyword">if</span> (ret &gt; ans) ans = ret;</span><br><span class="line">        <span class="keyword">if</span> (l + x-&gt;val + r &gt; ans)</span><br><span class="line">            ans = l + x-&gt;val + r;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        ans = root-&gt;val;</span><br><span class="line">        run(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="126-word-ladder-ii"><a class="markdownIt-Anchor" href="#126-word-ladder-ii"></a> <a href="https://leetcode.com/problems/word-ladder-ii" target="_blank" rel="noopener">126. Word Ladder II</a></h2><p><code>bfs</code> 搜索路径。</p><p>时间复杂度 <code>O(n ^ 2)</code>，运行时间 <code>629 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; f[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> n, width;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; a, <span class="keyword">const</span> <span class="built_in">string</span>&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = a.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i)</span><br><span class="line">            <span class="keyword">if</span> (a[i] != b[i])</span><br><span class="line">                <span class="keyword">if</span> (++c &gt; <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gen_ans</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> dest, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; tmp, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == dest) &#123;</span><br><span class="line">            ans.push_back(tmp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (cur != i &amp;&amp; f[<span class="number">0</span>][cur] + f[<span class="number">1</span>][i] == width &amp;&amp; check(wordList[cur], wordList[i])) &#123;</span><br><span class="line">                tmp.push_back(wordList[i]);</span><br><span class="line">                gen_ans(i, dest, tmp, wordList);</span><br><span class="line">                tmp.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; findLadders(<span class="built_in">string</span> beginWord, <span class="built_in">string</span> endWord, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordList) &#123;</span><br><span class="line">        n = wordList.size();</span><br><span class="line">        <span class="keyword">int</span> pt = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (wordList[i] == endWord) &#123;</span><br><span class="line">                pt = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (pt == <span class="number">-1</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        wordList.push_back(beginWord);</span><br><span class="line">        f[<span class="number">0</span>].resize(n + <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">        f[<span class="number">1</span>].resize(n + <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span>* q[<span class="number">2</span>]&#123;<span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">5</span>]&#123;n&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">5</span>]&#123;pt&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span>* h = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>* t = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>]&#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> o = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">1</span>;</span><br><span class="line">        width = n + <span class="number">5</span>;</span><br><span class="line">        f[<span class="number">0</span>][n] = <span class="number">1</span>; f[<span class="number">1</span>][pt] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (step &lt; width) &#123;</span><br><span class="line">            <span class="keyword">int</span> limit = t[o];</span><br><span class="line">            <span class="keyword">while</span> (h[o] &lt; limit) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = q[o][h[o]++];</span><br><span class="line">                <span class="keyword">if</span> (f[o ^ <span class="number">1</span>][i] &gt; <span class="number">0</span> &amp;&amp; step + f[o ^ <span class="number">1</span>][i] - <span class="number">1</span> &lt; width)</span><br><span class="line">                    width = step + f[o ^ <span class="number">1</span>][i] - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                    <span class="keyword">if</span> (f[o][j] == <span class="number">0</span> &amp;&amp; check(wordList[i], wordList[j])) &#123;</span><br><span class="line">                        f[o][j] = step + <span class="number">1</span>;</span><br><span class="line">                        q[o][t[o]++] = j;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            o ^= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="number">0</span>) ++step;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (width == n + <span class="number">5</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; tmp&#123;beginWord&#125;;</span><br><span class="line">        gen_ans(n, pt, tmp, wordList);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="128-longest-consecutive-sequence"><a class="markdownIt-Anchor" href="#128-longest-consecutive-sequence"></a> <a href="https://leetcode.com/problems/longest-consecutive-sequence" target="_blank" rel="noopener">128. Longest Consecutive Sequence</a></h2><h3 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一</h3><p>哈希，使用 STL 库的 <code>unordered_set</code> 非常方便。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>49 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> H1 = <span class="number">8191</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> H2 = <span class="number">11971</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">131071</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = (x * H1 + H2) % MOD;</span><br><span class="line">        <span class="keyword">return</span> r &lt; <span class="number">0</span> ? r + MOD : r;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prev;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ind, v, next;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "add " &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; " " &lt;&lt; c &lt;&lt; endl;</span></span><br><span class="line">        ind.push_back(b);</span><br><span class="line">        v.push_back(c);</span><br><span class="line">        next.push_back(prev[a]);</span><br><span class="line">        prev[a] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "find " &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">int</span> i = prev[hash(a)];</span><br><span class="line">        <span class="keyword">while</span> (i != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v[i] == a) &#123;</span><br><span class="line">                vis[ind[i]] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i = next[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> n = nums.size();</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        prev.resize(MOD + <span class="number">5</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            add(hash(nums[i]), i, nums[i]);</span><br><span class="line">        vis.resize(n + <span class="number">5</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = <span class="number">1</span>;</span><br><span class="line">                find(nums[i]);</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> j = nums[i] - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (find(j))</span><br><span class="line">                    --j, ++tmp;</span><br><span class="line">                j = nums[i] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (find(j))</span><br><span class="line">                    ++j, ++tmp;</span><br><span class="line">                <span class="keyword">if</span> (tmp &gt; ans) ans = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二</h3><p>参考别人的解法，代码非常简洁，a[i] 表示数字 i 所在的连续区间长度。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>9 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : nums)</span><br><span class="line">            <span class="keyword">if</span> (!a[i])</span><br><span class="line">                ans = max(ans, a[i] = a[i - a[i - <span class="number">1</span>]] = a[i + a[i + <span class="number">1</span>]] = a[i - <span class="number">1</span>] + <span class="number">1</span> + a[i + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="132-palindrome-partitioning-ii"><a class="markdownIt-Anchor" href="#132-palindrome-partitioning-ii"></a> <a href="https://leetcode.com/problems/palindrome-partitioning-ii" target="_blank" rel="noopener">132. Palindrome Partitioning II</a></h2><p>动态规划，f[i] 表示 s 的前 i 位的最小划分。</p><p>时间复杂度 <code>O(n ^ 2)</code>，运行时间 <code>6 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">257</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2147483647</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> *<span class="built_in">pow</span>, *h1, *h2, *f;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initHash</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="keyword">int</span> *h, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        h[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            h[i] = ((<span class="keyword">long</span> <span class="keyword">long</span>)h[i - <span class="number">1</span>] * P + (<span class="keyword">int</span>)s[i - <span class="number">1</span>]) % M;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEqual</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> _l = n - r + <span class="number">1</span>, _r = n - l + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> H1 = (h1[r] - (<span class="keyword">long</span> <span class="keyword">long</span>)h1[l] * <span class="built_in">pow</span>[r - l]) % M;</span><br><span class="line">        <span class="keyword">if</span> (H1 &lt; <span class="number">0</span>) H1 += M;</span><br><span class="line">        <span class="keyword">int</span> H2 = (h2[_r] - (<span class="keyword">long</span> <span class="keyword">long</span>)h2[_l] * <span class="built_in">pow</span>[_r - _l]) % M;</span><br><span class="line">        <span class="keyword">if</span> (H2 &lt; <span class="number">0</span>) H2 += M;</span><br><span class="line">        <span class="keyword">return</span> H1 == H2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCut</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="built_in">string</span> t = s;</span><br><span class="line">        reverse(t.begin(), t.end());</span><br><span class="line">        <span class="built_in">pow</span> = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">pow</span>[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">pow</span>[i] = ((<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">pow</span>[i - <span class="number">1</span>] * P) % M;</span><br><span class="line">        h1 = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        h2 = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        initHash(s, h1, n);</span><br><span class="line">        initHash(t, h2, n);</span><br><span class="line">        </span><br><span class="line">        f = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            f[i] = n + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">                <span class="keyword">if</span> (f[j] + <span class="number">1</span> &lt; f[i] &amp;&amp; isEqual(j + <span class="number">1</span>, i, n))</span><br><span class="line">                    f[i] = f[j] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="135-candy"><a class="markdownIt-Anchor" href="#135-candy"></a> <a href="https://leetcode.com/problems/candy" target="_blank" rel="noopener">135. Candy</a></h2><p>每个小孩得到的糖果数由左边小孩的最少糖果数和右边小孩的最少糖果数决定，变量说明：</p><ul><li><code>limit</code> – 左边小孩的糖果数限制</li><li><code>cur</code> – 当前小孩的糖果数</li></ul><p>时间复杂度 <code>O(n)</code>，运行时间 <code>43 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">candy</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ratings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = ratings.size();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> limit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; ratings[i] &gt; ratings[i - <span class="number">1</span>]) ++limit; <span class="keyword">else</span> limit = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">            ++ans;</span><br><span class="line">            <span class="keyword">bool</span> f = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span> (i + <span class="number">1</span> &lt; n &amp;&amp; ratings[i] &gt; ratings[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                ++i, ++cur, ans += cur;</span><br><span class="line">                f = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur &lt; limit) &#123;</span><br><span class="line">                ans += limit - cur;</span><br><span class="line">                cur = limit;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (f) limit = <span class="number">1</span>; <span class="keyword">else</span> limit = cur;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="140-word-break-ii"><a class="markdownIt-Anchor" href="#140-word-break-ii"></a> <a href="https://leetcode.com/problems/word-break-ii" target="_blank" rel="noopener">140. Word Break II</a></h2><p>动态规划。</p><p>时间复杂度 <code>O(n ^ 2)</code>，运行时间 <code>6 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; se;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; f;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rush</span><span class="params">(<span class="keyword">int</span> i, <span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            ans.push_back(s);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> w = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">            w = s[j] + w;</span><br><span class="line">            <span class="keyword">if</span> (f[j] &amp;&amp; se.count(w) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">auto</span> t = s;</span><br><span class="line">                <span class="keyword">if</span> (j) t.insert(j, <span class="string">" "</span>);</span><br><span class="line">                rush(j, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; wordBreak(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordDict) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        f.resize(n + <span class="number">5</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> a : wordDict)</span><br><span class="line">            se.insert(a);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">string</span> w = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                w = s[j] + w;</span><br><span class="line">                <span class="keyword">if</span> (f[j] &amp;&amp; se.count(w) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    f[i] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!f[n]) <span class="keyword">return</span> ans;</span><br><span class="line">        rush(n, s);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="145-binary-tree-postorder-traversal"><a class="markdownIt-Anchor" href="#145-binary-tree-postorder-traversal"></a> <a href="https://leetcode.com/problems/binary-tree-postorder-traversal" target="_blank" rel="noopener">145. Binary Tree Postorder Traversal</a></h2><p><code>dfs</code> 遍历一次即可。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>0 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rush</span><span class="params">(TreeNode* x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        rush(x-&gt;left);</span><br><span class="line">        rush(x-&gt;right);</span><br><span class="line">        ans.push_back(x-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        rush(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="146-lru-cache"><a class="markdownIt-Anchor" href="#146-lru-cache"></a> <a href="https://leetcode.com/problems/lru-cache" target="_blank" rel="noopener">146. LRU Cache</a></h2><p>使用 <code>list</code> 存储最近使用的缓存队列，<code>unordered_map</code> 存储键值和键在队列的位置。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>112 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator&gt; p;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">int</span> _capacity;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LRUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        _capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v.count(key)) &#123;</span><br><span class="line">            q.erase(p[key]);</span><br><span class="line">            q.push_front(key);</span><br><span class="line">            p[key] = q.begin();</span><br><span class="line">            <span class="keyword">return</span> v[key];</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v.count(key)) &#123;</span><br><span class="line">            q.erase(p[key]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (v.size() == _capacity) &#123;</span><br><span class="line">                <span class="keyword">auto</span> pg = q.back();</span><br><span class="line">                q.pop_back();</span><br><span class="line">                p.erase(pg);</span><br><span class="line">                v.erase(pg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        q.push_front(key);</span><br><span class="line">        p[key] = q.begin();</span><br><span class="line">        v[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="149-max-points-on-a-line"><a class="markdownIt-Anchor" href="#149-max-points-on-a-line"></a> <a href="https://leetcode.com/problems/max-points-on-a-line" target="_blank" rel="noopener">149. Max Points on a Line</a></h2><p>对所有点进行两层循环，第一层循环枚举线上的点 i，第二层循环计算其他点对于 i 的斜率，使用 STL 库点 <code>unordered_map</code> 统计，斜率相同的点共线。</p><p>时间复杂度 <code>O(n ^ 2)</code>，运行时间 <code>9 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a point.</span></span><br><span class="line"><span class="comment"> * struct Point &#123;</span></span><br><span class="line"><span class="comment"> *     int x;</span></span><br><span class="line"><span class="comment"> *     int y;</span></span><br><span class="line"><span class="comment"> *     Point() : x(0), y(0) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     Point(int a, int b) : x(a), y(b) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = points.size();</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">auto</span>&amp; p1 = points[i];</span><br><span class="line">            <span class="built_in">unordered_map</span>&lt;<span class="keyword">long</span> <span class="keyword">double</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line">            <span class="keyword">int</span> base = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> vert = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">auto</span>&amp; p2 = points[j];</span><br><span class="line">                <span class="keyword">if</span> (p1.x == p2.x &amp;&amp; p1.y == p2.y)</span><br><span class="line">                    ++base;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span> (p1.x == p2.x)</span><br><span class="line">                    ++vert;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ++cnt[((<span class="keyword">long</span> <span class="keyword">double</span>) p2.y - p1.y) / ((<span class="keyword">long</span> <span class="keyword">double</span>) p2.x - p1.x)];</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans, base + vert);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> c : cnt)</span><br><span class="line">                ans = max(ans, base + c.second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="154-find-minimum-in-rotated-sorted-array-ii"><a class="markdownIt-Anchor" href="#154-find-minimum-in-rotated-sorted-array-ii"></a> <a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii" target="_blank" rel="noopener">154. Find Minimum in Rotated Sorted Array II</a></h2><p>二分法。</p><p>时间复杂度 <code>O(log(n))</code>，运行时间 <code>6 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = num.size();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>, mid;</span><br><span class="line">        <span class="keyword">int</span> ans = num[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r - <span class="number">1</span>) &#123;</span><br><span class="line">            mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (num[l] &lt; num[mid]) &#123;</span><br><span class="line">                ans = min(ans, num[l]);</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (num[mid] &lt; num[r]) &#123;</span><br><span class="line">                ans = min(ans, num[mid]);</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                ++l;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = min(ans, min(num[l], num[r]));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="164-maximum-gap"><a class="markdownIt-Anchor" href="#164-maximum-gap"></a> <a href="https://leetcode.com/problems/maximum-gap" target="_blank" rel="noopener">164. Maximum Gap</a></h2><p>桶排序。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>9 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximumGap</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = num.size();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minNum = INT_MAX, maxNum = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num[i] &lt; minNum) minNum = num[i];</span><br><span class="line">            <span class="keyword">if</span> (num[i] &gt; maxNum) maxNum = num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minNum == maxNum) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> blockSize = (<span class="keyword">int</span>)<span class="built_in">ceil</span>(((<span class="keyword">double</span>)maxNum - minNum) / (n - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">int</span> blockCnt = (maxNum - minNum) / blockSize + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; minBlock(n, INT_MAX);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; maxBlock(n, INT_MIN);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j; i &lt; n; ++i) &#123;</span><br><span class="line">            j = (num[i] - minNum) / blockSize;</span><br><span class="line">            <span class="keyword">if</span> (num[i] &lt; minBlock[j]) minBlock[j] = num[i];</span><br><span class="line">            <span class="keyword">if</span> (num[i] &gt; maxBlock[j]) maxBlock[j] = num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pre = minNum;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; blockCnt; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!(minBlock[i] == INT_MAX &amp;&amp; maxBlock[i] == INT_MIN)) &#123;</span><br><span class="line">                ans = max(ans, minBlock[i] - pre);</span><br><span class="line">                pre = maxBlock[i];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="174-dungeon-game"><a class="markdownIt-Anchor" href="#174-dungeon-game"></a> <a href="https://leetcode.com/problems/dungeon-game" target="_blank" rel="noopener">174. Dungeon Game</a></h2><p>二份答案。</p><p>运行时间 <code>22 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calculateMinimumHP</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;dungeon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = dungeon.size();</span><br><span class="line">        <span class="keyword">int</span> n = dungeon[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> l = <span class="number">1</span>, r = <span class="number">2147483647</span>;</span><br><span class="line">        <span class="keyword">int</span> mid, ans, o0, o1;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> *f[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">bool</span> *b[<span class="number">2</span>];</span><br><span class="line">        f[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">long</span> <span class="keyword">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        f[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">long</span> <span class="keyword">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            o0 = <span class="number">1</span>; o1 = <span class="number">0</span>;</span><br><span class="line">            f[<span class="number">0</span>][<span class="number">0</span>] = dungeon[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">                f[<span class="number">0</span>][i] = -mid;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i || j) f[o1][j] = -mid;</span><br><span class="line">                    <span class="keyword">if</span> (i &amp;&amp; f[o0][j] &gt; -mid &amp;&amp; f[o0][j] + dungeon[i][j] &gt; f[o1][j])</span><br><span class="line">                        f[o1][j] = f[o0][j] + dungeon[i][j];</span><br><span class="line">                    <span class="keyword">if</span> (j &amp;&amp; f[o1][j - <span class="number">1</span>] &gt; -mid &amp;&amp; f[o1][j - <span class="number">1</span>] + dungeon[i][j] &gt; f[o1][j])</span><br><span class="line">                        f[o1][j] = f[o1][j - <span class="number">1</span>] + dungeon[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                o0 = o1; o1 ^= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (f[o0][n - <span class="number">1</span>] &gt; -mid) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[] f[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">delete</span>[] f[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="188-best-time-to-buy-and-sell-stock-iv"><a class="markdownIt-Anchor" href="#188-best-time-to-buy-and-sell-stock-iv"></a> <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv" target="_blank" rel="noopener">188. Best Time to Buy and Sell Stock IV</a></h2><h3 id="方法一-2"><a class="markdownIt-Anchor" href="#方法一-2"></a> 方法一</h3><p>动态规划，滚动数组节省空间。f[j][i] 表示在前 i 个股票中交易 j 次的最大收益。</p><p>时间复杂度 <code>O(n * k)</code>，运行时间 <code>6 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.size();</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= n / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">                ans += max(<span class="number">0</span>, prices[i] - prices[i - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; f[<span class="number">2</span>];</span><br><span class="line">        f[<span class="number">0</span>].resize(n + <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">        f[<span class="number">1</span>].resize(n + <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">int</span> o1 = <span class="number">0</span>, o2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; ++j, o1 ^= <span class="number">1</span>, o2 ^= <span class="number">1</span>) &#123;</span><br><span class="line">            f[o2][<span class="number">0</span>] = f[o1][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">auto</span> g = f[o1][<span class="number">0</span>] - prices[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                f[o2][i] = f[o2][i - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    g = max(g, f[o1][i - <span class="number">2</span>] - prices[i - <span class="number">2</span>]);</span><br><span class="line">                    f[o2][i] = max(f[o2][i], prices[i - <span class="number">1</span>] + g);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (f[o2][n] &gt; ans) ans = f[o2][n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="方法二-2"><a class="markdownIt-Anchor" href="#方法二-2"></a> 方法二</h3><p>动态规划。f[1][i][j] 表示在前 i 个股票中买入 j 次的最大收益（当前持有股票），f[0][i][j] 表示对应的不持有股票的状态。</p><p>时间复杂度 <code>O(n * k)</code>，运行时间 <code>6 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.size();</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= n / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">                ans += max(<span class="number">0</span>, prices[i] - prices[i - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; f[<span class="number">2</span>];</span><br><span class="line">        f[<span class="number">0</span>].resize(k + <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">        f[<span class="number">1</span>].resize(k + <span class="number">3</span>, INT_MIN);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span> p = prices[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = min(k, i / <span class="number">2</span> + <span class="number">1</span>); j &gt; <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="comment">// sell</span></span><br><span class="line">                f[<span class="number">0</span>][j] = max(f[<span class="number">0</span>][j], f[<span class="number">1</span>][j] + p);</span><br><span class="line">                <span class="comment">// buy</span></span><br><span class="line">                f[<span class="number">1</span>][j] = max(f[<span class="number">1</span>][j], f[<span class="number">0</span>][j - <span class="number">1</span>] - p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> t : f[<span class="number">0</span>])</span><br><span class="line">            ans = max(ans, t);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;115-distinct-subsequences&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#115-distinct-subsequences&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://leetcode.com/problems/distinct-subsequences&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;115. Distinct Subsequences&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;动态规划，f[i][j] 表示 S 的前 i 位形成 T 的前 j 位的子序列的数目。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://bbappyuanyuan.github.io/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode「Hard」问题题解（1～100）</title>
    <link href="https://bbappyuanyuan.github.io/posts/fcb10a97/"/>
    <id>https://bbappyuanyuan.github.io/posts/fcb10a97/</id>
    <published>2017-01-01T06:02:00.000Z</published>
    <updated>2017-01-01T06:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-median-of-two-sorted-arrays"><a class="markdownIt-Anchor" href="#4-median-of-two-sorted-arrays"></a> <a href="https://leetcode.com/problems/median-of-two-sorted-arrays" target="_blank" rel="noopener">4. Median of Two Sorted Arrays</a></h2><p>问题等价为找 nums1 和 nums2 的第 k 大，用递归解决：</p><a id="more"></a><ol><li>如果 k = 1，递归结束，返回 min(nums1[0], nums2[0])；</li><li>比较 nums1[k / 2 - 1] 和 nums2[k / 2 - 1]：<ul><li>如果 nums1[k / 2 - 1] &lt;= nums2[k / 2 - 1]，则第 k 大的数一定不落在nums1[0 … k / 2 - 1] 中，删除nums1[0 … k / 2 - 1]；</li><li>反之同理，删除nums2[0 … k / 2 - 1]。</li></ul></li><li>k -= k / 2。</li></ol><p>时间复杂度 <code>O(log(m + n))</code>，运行时间 <code>49 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKth</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h1 = <span class="number">0</span>, h2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (h1 == m) <span class="keyword">return</span> nums2[h2 + k - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (h2 == n) <span class="keyword">return</span> nums1[h1 + k - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> min(nums1[h1], nums2[h2]);</span><br><span class="line">            <span class="keyword">int</span> le = h1 + k / <span class="number">2</span> - <span class="number">1</span> &lt; m ? nums1[h1 + k / <span class="number">2</span> - <span class="number">1</span>] : INT_MAX;</span><br><span class="line">            <span class="keyword">int</span> ri = h2 + k / <span class="number">2</span> - <span class="number">1</span> &lt; n ? nums2[h2 + k / <span class="number">2</span> - <span class="number">1</span>] : INT_MAX;</span><br><span class="line">            <span class="keyword">if</span> (le &lt;= ri)</span><br><span class="line">                h1 += k / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                h2 += k / <span class="number">2</span>;</span><br><span class="line">            k -= k / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.size();</span><br><span class="line">        <span class="keyword">int</span> n = nums2.size();</span><br><span class="line">        <span class="keyword">if</span> ((m + n) &amp; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> findKth(nums1, m, nums2, n, (m + n) / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> (findKth(nums1, m, nums2, n, (m + n) / <span class="number">2</span>) + findKth(nums1, m, nums2, n, (m + n) / <span class="number">2</span> + <span class="number">1</span>)) * <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="10-regular-expression-matching"><a class="markdownIt-Anchor" href="#10-regular-expression-matching"></a> <a href="https://leetcode.com/problems/regular-expression-matching" target="_blank" rel="noopener">10. Regular Expression Matching</a></h2><p>动态规划，f[i][j] 表示字符串 s 的前 i 位与字符串 p 的前 j 位的匹配情况。</p><p>时间复杂度 <code>O(m * n)</code>，运行时间 <code>9 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = s.length(), n = p.length();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; f(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">'*'</span>)</span><br><span class="line">                    f[i][j] = f[i][j - <span class="number">2</span>] || (i &gt; <span class="number">0</span> &amp;&amp; f[i - <span class="number">1</span>][j] &amp;&amp; (s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] || p[j - <span class="number">2</span>] == <span class="string">'.'</span>));</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    f[i][j] = i &gt; <span class="number">0</span> &amp;&amp; f[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; (s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">return</span> f[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="23-merge-k-sorted-lists"><a class="markdownIt-Anchor" href="#23-merge-k-sorted-lists"></a> <a href="https://leetcode.com/problems/merge-k-sorted-lists" target="_blank" rel="noopener">23. Merge k Sorted Lists</a></h2><p>把每个链表的头放到<code>单调队列</code>中，每次从中取出最小的数，再加入该列表的下一个数。</p><p>时间复杂度 <code>O(m * log(n))</code>，运行时间 <code>188 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(ListNode *a, ListNode *b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a-&gt;val &gt; b-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode *&gt; &amp;lists)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;ListNode *, <span class="built_in">vector</span>&lt;ListNode *&gt;, cmp&gt; q;</span><br><span class="line">        <span class="keyword">int</span> n = lists.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (lists[i] != <span class="literal">NULL</span>)</span><br><span class="line">                q.push(lists[i]);</span><br><span class="line">        <span class="keyword">if</span> (q.empty()) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode *ans, *p, *a;</span><br><span class="line">        a = q.top(); q.pop();</span><br><span class="line">        <span class="keyword">if</span> (a-&gt;next != <span class="literal">NULL</span>) q.push(a-&gt;next);</span><br><span class="line">        ans = p = <span class="keyword">new</span> ListNode(a-&gt;val);</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            a = q.top(); q.pop();</span><br><span class="line">            <span class="keyword">if</span> (a-&gt;next != <span class="literal">NULL</span>) q.push(a-&gt;next);</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> ListNode(a-&gt;val);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="25-reverse-nodes-in-k-group"><a class="markdownIt-Anchor" href="#25-reverse-nodes-in-k-group"></a> <a href="https://leetcode.com/problems/reverse-nodes-in-k-group" target="_blank" rel="noopener">25. Reverse Nodes in k-Group</a></h2><p>模拟。</p><p>运行时间 <code>132 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">reverseKGroup</span><span class="params">(ListNode *head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ++n;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> group = n / k;</span><br><span class="line">        ListNode **b;</span><br><span class="line">        b = <span class="keyword">new</span> ListNode*[k];</span><br><span class="line">        ListNode *pre, *ans;</span><br><span class="line">        ans = pre = p = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; group; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; ++j) &#123;</span><br><span class="line">                b[j] = p;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            b[<span class="number">0</span>]-&gt;next = p;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + <span class="number">1</span> &lt; k; ++j)</span><br><span class="line">                b[j + <span class="number">1</span>]-&gt;next = b[j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                ans = b[k - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pre-&gt;next = b[k - <span class="number">1</span>];</span><br><span class="line">            pre = b[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="30-substring-with-concatenation-of-all-words"><a class="markdownIt-Anchor" href="#30-substring-with-concatenation-of-all-words"></a> <a href="https://leetcode.com/problems/substring-with-concatenation-of-all-words" target="_blank" rel="noopener">30. Substring with Concatenation of All Words</a></h2><p>从前往后扫描，维护长度为所有单词长度和的字符串里包含单词表单词的情况，如果符合条件，统计进答案。</p><p>变量说明：</p><ul><li><code>idx[w]</code> – 单词 w 的编号</li><li><code>wc</code> – 单词个数（不包括重复单词）</li><li><code>dest[i]</code> – 编号为 i 的单词的个数</li></ul><p>时间复杂度 <code>O(n)</code>，运行时间 <code>29 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findSubstring(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">int</span> m = words.size();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> || m == <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="keyword">int</span> len = words[<span class="number">0</span>].length();</span><br><span class="line">        <span class="keyword">int</span> full_len = m * len;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; idx;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dest(m, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> wc = m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            <span class="keyword">if</span> (idx.count(words[i])) &#123;</span><br><span class="line">                ++dest[idx[words[i]]];</span><br><span class="line">                --wc;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                idx[words[i]] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(m, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j + len &lt;= n; j += len) &#123;</span><br><span class="line">                <span class="keyword">auto</span> cur = s.substr(j, len);</span><br><span class="line">                <span class="keyword">if</span> (idx.count(cur)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cnt[idx[cur]] == dest[idx[cur]]) --tmp;</span><br><span class="line">                    <span class="keyword">if</span> (++cnt[idx[cur]] == dest[idx[cur]])</span><br><span class="line">                        ++tmp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= full_len) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> pre = s.substr(j - full_len, len);</span><br><span class="line">                    <span class="keyword">if</span> (idx.count(pre)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cnt[idx[pre]] == dest[idx[pre]]) --tmp;</span><br><span class="line">                        <span class="keyword">if</span> (--cnt[idx[pre]] == dest[idx[pre]])</span><br><span class="line">                            ++tmp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (tmp == wc) ans.push_back(j - full_len + len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(ans.begin(), ans.end());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="32-longest-valid-parentheses"><a class="markdownIt-Anchor" href="#32-longest-valid-parentheses"></a> <a href="https://leetcode.com/problems/longest-valid-parentheses" target="_blank" rel="noopener">32. Longest Valid Parentheses</a></h2><p>从前往后扫描一遍字符串进行括号匹配即可，标记匹配成功的字符位置，因为合法的圆括号串中每一位都匹配成功，所以答案是寻找最长的连续被标记匹配成功的字符串。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>12 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; match(n, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'('</span>)</span><br><span class="line">                st.push(i);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span> (!st.empty()) &#123;</span><br><span class="line">                    match[i] = match[st.top()] = <span class="literal">true</span>;</span><br><span class="line">                    st.pop();</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (match[i])</span><br><span class="line">                ++tmp;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (tmp &gt; ans) ans = tmp;</span><br><span class="line">                tmp = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp &gt; ans) ans = tmp;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="37-sudoku-solver"><a class="markdownIt-Anchor" href="#37-sudoku-solver"></a> <a href="https://leetcode.com/problems/sudoku-solver" target="_blank" rel="noopener">37. Sudoku Solver</a></h2><p>位运算优化的 <code>dfs</code> 算法。</p><p>变量说明：</p><ul><li><code>r[x]</code> – 第 x 行的已确定数字</li><li><code>c[y]</code> – 第 y 列的已确定数字</li><li><code>b[i]</code> – 第 i 个九宫格的已确定数字</li></ul><p>运行时间 <code>6 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> nextx[<span class="number">9</span>][<span class="number">9</span>], nexty[<span class="number">9</span>][<span class="number">9</span>], g[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">int</span> r[<span class="number">9</span>], c[<span class="number">9</span>], b[<span class="number">9</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; &amp;a, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> t, v;</span><br><span class="line">        t = ((<span class="number">1</span> &lt;&lt; <span class="number">9</span>) - <span class="number">1</span>) &amp; ~(r[x] | c[y] | b[g[x][y]]);</span><br><span class="line">        <span class="keyword">while</span> (t) &#123;</span><br><span class="line">            v = (<span class="keyword">int</span>)(<span class="built_in">log</span>(t - (t &amp; (t - <span class="number">1</span>))) / <span class="built_in">log</span>(<span class="number">2</span>) + <span class="number">0.5</span>);</span><br><span class="line">            a[x][y] = <span class="string">'1'</span> + v;</span><br><span class="line">            r[x] |= <span class="number">1</span> &lt;&lt; v;</span><br><span class="line">            c[y] |= <span class="number">1</span> &lt;&lt; v;</span><br><span class="line">            b[g[x][y]] |= <span class="number">1</span> &lt;&lt; v;</span><br><span class="line">            <span class="keyword">if</span> (dfs(a, nextx[x][y], nexty[x][y])) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            r[x] &amp;= ~(<span class="number">1</span> &lt;&lt; v);</span><br><span class="line">            c[y] &amp;= ~(<span class="number">1</span> &lt;&lt; v);</span><br><span class="line">            b[g[x][y]] &amp;= ~(<span class="number">1</span> &lt;&lt; v);</span><br><span class="line">            t = t &amp; (t - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        a[x][y] = <span class="string">'.'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solveSudoku</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; &amp;board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j)</span><br><span class="line">                g[i][j] = i / <span class="number">3</span> * <span class="number">3</span> +  j / <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">memset</span>(r, <span class="number">0</span>, <span class="keyword">sizeof</span>(r));</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">        <span class="keyword">int</span> px = <span class="number">-1</span>, py = <span class="number">-1</span>, hx = <span class="number">9</span>, hy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j)</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">'.'</span>) &#123;</span><br><span class="line">                    nextx[i][j] = <span class="number">9</span>;</span><br><span class="line">                    <span class="keyword">if</span> (px != <span class="number">-1</span>) &#123;</span><br><span class="line">                        nextx[px][py] = i;</span><br><span class="line">                        nexty[px][py] = j;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        hx = i;</span><br><span class="line">                        hy = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                    px = i; py = j;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r[i] |= <span class="number">1</span> &lt;&lt; (board[i][j] - <span class="string">'1'</span>);</span><br><span class="line">                    c[j] |= <span class="number">1</span> &lt;&lt; (board[i][j] - <span class="string">'1'</span>);</span><br><span class="line">                    b[g[i][j]] |= <span class="number">1</span> &lt;&lt; (board[i][j] - <span class="string">'1'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        dfs(board, hx, hy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="41-first-missing-positive"><a class="markdownIt-Anchor" href="#41-first-missing-positive"></a> <a href="https://leetcode.com/problems/first-missing-positive" target="_blank" rel="noopener">41. First Missing Positive</a></h2><p>可以使用 O(n) 空间的一位数组作为桶，统计 1～n 的出现情况。由于 <code>O(1)</code> 空间的要求，使用原数组作为桶。</p><p>运行时间 <code>3 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == i + <span class="number">1</span> || nums[i] &lt;= <span class="number">0</span> || nums[i] &gt; n || nums[i] == nums[nums[i] - <span class="number">1</span>])</span><br><span class="line">                ++i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                swap(nums[i], nums[nums[i] - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n &amp;&amp; nums[i] == i + <span class="number">1</span>; ++i);</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="42-trapping-rain-water"><a class="markdownIt-Anchor" href="#42-trapping-rain-water"></a> <a href="https://leetcode.com/problems/trapping-rain-water" target="_blank" rel="noopener">42. Trapping Rain Water</a></h2><p>每个 bar 可以蓄水的高度由它往左的最高的 bar 和往右最高的 bar 决定，遍历 height 数组两次即可求得。</p><p>运行时间 <code>9 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = height.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; f(height);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, cur_max = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[i] &gt; cur_max) cur_max = height[i];</span><br><span class="line">            f[i] = cur_max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>, cur_max = <span class="number">0</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[i] &gt; cur_max) cur_max = height[i];</span><br><span class="line">            <span class="keyword">if</span> (cur_max &lt; f[i]) f[i] = cur_max;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            ans += f[i] - height[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="44-wildcard-matching"><a class="markdownIt-Anchor" href="#44-wildcard-matching"></a> <a href="https://leetcode.com/problems/wildcard-matching" target="_blank" rel="noopener">44. Wildcard Matching</a></h2><h3 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一</h3><p>动态规划，f[i][j] 表示字符串 s 的前 i 位与字符串 p 的前 j 位的匹配情况。</p><p>时间复杂度 <code>O(m * n)</code>，运行时间 <code>102 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = s.length(), n = p.length();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; f(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">'*'</span>)</span><br><span class="line">                    f[i][j] = f[i][j - <span class="number">1</span>] || (i &gt; <span class="number">0</span> &amp;&amp; f[i - <span class="number">1</span>][j]);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    f[i][j] = i &gt; <span class="number">0</span> &amp;&amp; f[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; (s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">'?'</span>);</span><br><span class="line">        <span class="keyword">return</span> f[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二</h3><p>既然 <code>*</code> 可以匹配任意个字符，只需要记录当前匹配位置的最近的一个 <code>*</code> 的位置即可。</p><p>运行时间 <code>25 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">const</span> <span class="keyword">char</span> *p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *pre_s = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *pre_p = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (*s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*s == *p || *p == <span class="string">'?'</span>) &#123;</span><br><span class="line">                ++s;</span><br><span class="line">                ++p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (*p == <span class="string">'*'</span>) &#123;</span><br><span class="line">                pre_s = s;</span><br><span class="line">                pre_p = ++p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (pre_s == <span class="literal">NULL</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                s = ++pre_s;</span><br><span class="line">                p = pre_p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (*p == <span class="string">'*'</span>) ++p;</span><br><span class="line">        <span class="keyword">if</span> (*s || *p) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="45-jump-game-ii"><a class="markdownIt-Anchor" href="#45-jump-game-ii"></a> <a href="https://leetcode.com/problems/jump-game-ii" target="_blank" rel="noopener">45. Jump Game II</a></h2><p>贪心策略，每次跳到能跳到最远的地方。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>21 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur, h, t, next_ind;</span><br><span class="line">        <span class="keyword">for</span> (cur = <span class="number">0</span>, h = <span class="number">1</span>, t, next_ind; cur + A[cur] &lt; n - <span class="number">1</span>; cur = next_ind, ++ans) &#123;</span><br><span class="line">            t = cur + A[cur];</span><br><span class="line">            <span class="keyword">if</span> (t &gt;= n) t = n - <span class="number">1</span>;</span><br><span class="line">            next_ind = h;</span><br><span class="line">            <span class="keyword">while</span> (h &lt;= t) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[h] + h &gt;= A[next_ind] + next_ind)</span><br><span class="line">                    next_ind = h;</span><br><span class="line">                ++h;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur != n - <span class="number">1</span>) ++ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="51-n-queens"><a class="markdownIt-Anchor" href="#51-n-queens"></a> <a href="https://leetcode.com/problems/n-queens" target="_blank" rel="noopener">51. N-Queens</a></h2><p>把原问题转化为求 1～n 的排列，表示每一行的皇后的位置，<code>dfs</code> 算法，保证每条斜线上最多只有一个皇后。</p><p>运行时间 <code>8 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; ans;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; bx, by;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">            ans.push_back(<span class="built_in">map</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (!bx[i + a[j]] &amp;&amp; !by[i - a[j] + n]) &#123;</span><br><span class="line">                bx[i + a[j]] = by[i - a[j] + n] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">map</span>[i][a[j]] = <span class="string">'Q'</span>;</span><br><span class="line">                swap(a[i], a[j]);</span><br><span class="line">                dfs(i + <span class="number">1</span>, n);</span><br><span class="line">                swap(a[i], a[j]);</span><br><span class="line">                bx[i + a[j]] = by[i - a[j] + n] = <span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">map</span>[i][a[j]] = <span class="string">'.'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">map</span> = <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;(n, <span class="built_in">string</span>(n, <span class="string">'.'</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            a.push_back(i);</span><br><span class="line">        bx.resize(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        fill(begin(bx), end(bx), <span class="literal">false</span>);</span><br><span class="line">        by.resize(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        fill(begin(by), end(by), <span class="literal">false</span>);</span><br><span class="line">        dfs(<span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="52-n-queens-ii"><a class="markdownIt-Anchor" href="#52-n-queens-ii"></a> <a href="https://leetcode.com/problems/n-queens-ii" target="_blank" rel="noopener">52. N-Queens II</a></h2><p>同 <code>51. N-Queens</code>。</p><p>运行时间 <code>4 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n, ans;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; bx, by;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (!bx[i + a[j]] &amp;&amp; !by[i - a[j] + n]) &#123;</span><br><span class="line">                bx[i + a[j]] = by[i - a[j] + n] = <span class="literal">true</span>;</span><br><span class="line">                swap(a[i], a[j]);</span><br><span class="line">                dfs(i + <span class="number">1</span>, n);</span><br><span class="line">                swap(a[i], a[j]);</span><br><span class="line">                bx[i + a[j]] = by[i - a[j] + n] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">totalNQueens</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            a.push_back(i);</span><br><span class="line">        bx.resize(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        fill(begin(bx), end(bx), <span class="literal">false</span>);</span><br><span class="line">        by.resize(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        fill(begin(by), end(by), <span class="literal">false</span>);</span><br><span class="line">        dfs(<span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="57-insert-interval"><a class="markdownIt-Anchor" href="#57-insert-interval"></a> <a href="https://leetcode.com/problems/insert-interval" target="_blank" rel="noopener">57. Insert Interval</a></h2><p>分两步：</p><ol><li>删除被 newInterval 覆盖的 interval。</li><li>更新因 newInterval 而扩展的 interavl。</li></ol><p>时间复杂度 <code>O(n)</code>，运行时间 <code>16 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for an interval.</span></span><br><span class="line"><span class="comment"> * struct Interval &#123;</span></span><br><span class="line"><span class="comment"> *     int start;</span></span><br><span class="line"><span class="comment"> *     int end;</span></span><br><span class="line"><span class="comment"> *     Interval() : start(0), end(0) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     Interval(int s, int e) : start(s), end(e) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;Interval&gt; insert(<span class="built_in">vector</span>&lt;Interval&gt;&amp; intervals, Interval newInterval) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;Interval&gt; ans;</span><br><span class="line">        <span class="built_in">vector</span>&lt;Interval&gt;::iterator it;</span><br><span class="line">        <span class="keyword">for</span> (it = begin(intervals); it != end(intervals); ++it) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it-&gt;start &lt;= newInterval.start &amp;&amp; newInterval.end &lt;= it-&gt;end)</span><br><span class="line">                <span class="keyword">return</span> intervals;</span><br><span class="line">            <span class="keyword">if</span> (!(newInterval.start &lt;= it-&gt;start &amp;&amp; it-&gt;end &lt;= newInterval.end))</span><br><span class="line">                ans.push_back(*it);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;Interval&gt;::iterator h, t;</span><br><span class="line">        h = t = end(ans);</span><br><span class="line">        <span class="keyword">for</span> (it = begin(ans); it != end(ans) &amp;&amp; it-&gt;start &lt;= newInterval.end; ++it) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it-&gt;start &lt;= newInterval.start &amp;&amp; newInterval.start &lt;= it-&gt;end)</span><br><span class="line">                h = it;</span><br><span class="line">            <span class="keyword">if</span> (it-&gt;start &lt;= newInterval.end &amp;&amp; newInterval.end &lt;= it-&gt;end)</span><br><span class="line">                t = it;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (h != end(ans) &amp;&amp; t != end(ans)) &#123;</span><br><span class="line">            h-&gt;end = t-&gt;end;</span><br><span class="line">            ans.erase(t);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (h != end(ans)) &#123;</span><br><span class="line">            h-&gt;end = newInterval.end;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (t != end(ans)) &#123;</span><br><span class="line">            t-&gt;start = newInterval.start;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (it = begin(ans); it != end(ans); ++it)</span><br><span class="line">                <span class="keyword">if</span> (it-&gt;start &gt; newInterval.end) &#123;</span><br><span class="line">                    ans.insert(it, newInterval);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (it == end(ans))</span><br><span class="line">                ans.push_back(newInterval);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="65-valid-number"><a class="markdownIt-Anchor" href="#65-valid-number"></a> <a href="https://leetcode.com/problems/valid-number/" target="_blank" rel="noopener">65. Valid Number</a></h2><p>忽略前后的空格，分两类判断：普通数字（包括负数和小数），科学计数法数字。</p><p>运行时间 <code>9 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPureNumber</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">bool</span> allowDot = <span class="literal">true</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'+'</span> || s[<span class="number">0</span>] == <span class="string">'-'</span>) s.erase(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">bool</span> num = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">bool</span> dot = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)</span><br><span class="line">                num = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'.'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!allowDot) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (dot) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                dot = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isENumber</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> p = s.find(<span class="string">'e'</span>);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="built_in">string</span>::npos) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isPureNumber(s.substr(<span class="number">0</span>, p)) &amp;&amp; isPureNumber(s.substr(p + <span class="number">1</span>), <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isNumber</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (s[<span class="number">0</span>] == <span class="string">' '</span>) s.erase(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (s[s.length() - <span class="number">1</span>] == <span class="string">' '</span>) s.erase(s.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> isPureNumber(s) || isENumber(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="68-text-justification"><a class="markdownIt-Anchor" href="#68-text-justification"></a> <a href="https://leetcode.com/problems/text-justification" target="_blank" rel="noopener">68. Text Justification</a></h2><p>模拟。</p><p>运行时间 <code>0 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minLen</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it1, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = it1; it != it2; ++it) &#123;</span><br><span class="line">            ret += (*it).length();</span><br><span class="line">            <span class="keyword">if</span> (it != it1) ++ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">makeWords</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it1, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it2, <span class="keyword">const</span> <span class="keyword">int</span>&amp; limit)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ret = *it1;</span><br><span class="line">        <span class="keyword">int</span> k = it2 - it1 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = limit;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = it1; it != it2; ++it)</span><br><span class="line">            left -= (*it).length();</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">return</span> ret + <span class="built_in">string</span>(left, <span class="string">' '</span>);</span><br><span class="line">        <span class="built_in">string</span> small = <span class="built_in">string</span>(left / k, <span class="string">' '</span>);</span><br><span class="line">        <span class="built_in">string</span> big = small + <span class="string">' '</span>;</span><br><span class="line">        <span class="keyword">int</span> big_left = left % k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = it1 + <span class="number">1</span>; it != it2; ++it) &#123;</span><br><span class="line">            <span class="keyword">if</span> (big_left) &#123;</span><br><span class="line">                ret += big;</span><br><span class="line">                --big_left;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                ret += small;</span><br><span class="line">            ret += *it;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">makeLastWords</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it1, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it2, <span class="keyword">const</span> <span class="keyword">int</span>&amp; limit)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ret = *it1;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = it1 + <span class="number">1</span>; it != it2; ++it) &#123;</span><br><span class="line">            ret += <span class="string">' '</span>;</span><br><span class="line">            ret += *it;</span><br><span class="line">        &#125;</span><br><span class="line">        ret += <span class="built_in">string</span>(limit - ret.length(), <span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; fullJustify(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words, <span class="keyword">int</span> maxWidth) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (words.empty()) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="keyword">auto</span> last = begin(words);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = begin(words) + <span class="number">1</span>; it != end(words); ++it)</span><br><span class="line">            <span class="keyword">if</span> (minLen(last, it + <span class="number">1</span>) &gt; maxWidth) &#123;</span><br><span class="line">                ans.push_back(makeWords(last, it, maxWidth));</span><br><span class="line">                last = it;</span><br><span class="line">            &#125;</span><br><span class="line">        ans.push_back(makeLastWords(last, end(words), maxWidth));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="72-edit-distance"><a class="markdownIt-Anchor" href="#72-edit-distance"></a> <a href="https://leetcode.com/problems/edit-distance" target="_blank" rel="noopener">72. Edit Distance</a></h2><p>动态规划，f[i][j] 表示 word1 的前 i 位与 word2 的前 j 位匹配所需的最少操作数。</p><p>时间复杂度 <code>O(m * n)</code>，运行时间 <code>9 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(<span class="built_in">string</span> word1, <span class="built_in">string</span> word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = word1.length();</span><br><span class="line">        <span class="keyword">int</span> m = word2.length();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> || m == <span class="number">0</span>) <span class="keyword">return</span> n + m;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; f = <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m + <span class="number">1</span>, max(n, m) + <span class="number">2</span>));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            f[i][<span class="number">0</span>] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            f[<span class="number">0</span>][i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (word1[i - <span class="number">1</span>] == word2[j - <span class="number">1</span>])</span><br><span class="line">                    f[i][j] = f[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    f[i][j] = f[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                f[i][j] = min(f[i][j], min(f[i][j - <span class="number">1</span>], f[i - <span class="number">1</span>][j]) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n][m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="76-minimum-window-substring"><a class="markdownIt-Anchor" href="#76-minimum-window-substring"></a> <a href="https://leetcode.com/problems/minimum-window-substring" target="_blank" rel="noopener">76. Minimum Window Substring</a></h2><p>从左往右扫描一遍字符串 s，维护出现的字母的计数器。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>12 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> pcnt[<span class="number">256</span>], cnt[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">int</span> types;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pcnt[ch])</span><br><span class="line">            <span class="keyword">if</span> (++cnt[ch] == pcnt[ch])</span><br><span class="line">                types += pcnt[ch];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pcnt[ch])</span><br><span class="line">            <span class="keyword">if</span> (cnt[ch]-- == pcnt[ch])</span><br><span class="line">                types -= pcnt[ch];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">minWindow</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="string">""</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="built_in">memset</span>(pcnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(pcnt));</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        types = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ls = s.length();</span><br><span class="line">        <span class="keyword">int</span> lt = t.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lt; ++i)</span><br><span class="line">            ++pcnt[t[i]];</span><br><span class="line">        <span class="keyword">int</span> a_h, a_len = ls + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> head = <span class="number">0</span>, tail = <span class="number">0</span>; tail &lt; ls; ++tail) &#123;</span><br><span class="line">            add(s[tail]);</span><br><span class="line">            <span class="keyword">while</span> (types == lt) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tail - head + <span class="number">1</span> &lt; a_len) &#123;</span><br><span class="line">                    a_len = tail - head + <span class="number">1</span>;</span><br><span class="line">                    a_h = head;</span><br><span class="line">                &#125;</span><br><span class="line">                remove(s[head++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a_len == ls + <span class="number">1</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">return</span> s.substr(a_h, a_len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="84-largest-rectangle-in-histogram"><a class="markdownIt-Anchor" href="#84-largest-rectangle-in-histogram"></a> <a href="https://leetcode.com/problems/largest-rectangle-in-histogram" target="_blank" rel="noopener">84. Largest Rectangle in Histogram</a></h2><p>最优情况下，矩形的高度一定是某一个 bar 的高度，计算每个 bar 向左向右能延伸的矩形的最大长度。f[i] 表示高度为 height[i] 且右端位于 i 的矩形的最大面积，g[i] 表示高度为 height[i] 且左端位于 i 的矩形的最大面积，最终答案为 <code>max{f[i] + g[i] - height[i]}</code>。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>32 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = height.size();</span><br><span class="line">        <span class="built_in">stack</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; st;</span><br><span class="line">        st.push(make_pair(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (height[i] &lt;= st.top().second)</span><br><span class="line">                st.pop();</span><br><span class="line">            f[i] = (i - st.top().first) * height[i];</span><br><span class="line">            st.push(make_pair(i, height[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = height.size();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; f, g;</span><br><span class="line">        f.resize(n);</span><br><span class="line">        g.resize(n);</span><br><span class="line">        dp(height, f);</span><br><span class="line">        reverse(begin(height), end(height));</span><br><span class="line">        dp(height, g);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            ans = max(ans, f[i] - height[n - <span class="number">1</span> -i] + g[n - <span class="number">1</span> - i]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="85-maximal-rectangle"><a class="markdownIt-Anchor" href="#85-maximal-rectangle"></a> <a href="https://leetcode.com/problems/maximal-rectangle" target="_blank" rel="noopener">85. Maximal Rectangle</a></h2><p>同 <code>84. Largest Rectangle in Histogram</code>。</p><p>时间复杂度 <code>O(m * n)</code>，运行时间 <code>23 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; h, f, g;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; f)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; st;</span><br><span class="line">        st.push(make_pair(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (h[i] &lt;= st.top().second)</span><br><span class="line">                st.pop();</span><br><span class="line">            f[i] = (i - st.top().first) * h[i];</span><br><span class="line">            st.push(make_pair(i, h[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dp(f);</span><br><span class="line">        reverse(begin(h), end(h));</span><br><span class="line">        dp(g);</span><br><span class="line">        reverse(begin(h), end(h));</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            ret = max(ret, f[i] - h[i] + g[n - <span class="number">1</span> - i]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximalRectangle</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        m = matrix.size();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        n = matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        h.resize(n);</span><br><span class="line">        f.resize(n);</span><br><span class="line">        g.resize(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            h[i] = matrix[<span class="number">0</span>][i] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = dp();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                h[j] = matrix[i][j] == <span class="string">'1'</span> ? h[j] + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            ans = max(ans, dp());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="87-scramble-string"><a class="markdownIt-Anchor" href="#87-scramble-string"></a> <a href="https://leetcode.com/problems/scramble-string" target="_blank" rel="noopener">87. Scramble String</a></h2><p><code>dfs</code> 算法，建立数据结构 <code>CP</code> 判断字符串字符组成是否相同。</p><p>运行时间 <code>4 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CP</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> cnt[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">int</span> diff;</span><br><span class="line">        </span><br><span class="line">        CP() &#123;</span><br><span class="line">            <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</span><br><span class="line">            diff = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp; c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt[c]++ == <span class="number">0</span>) ++diff;</span><br><span class="line">            <span class="keyword">if</span> (cnt[c] == <span class="number">0</span>) --diff;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp; c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt[c]-- == <span class="number">0</span>) ++diff;</span><br><span class="line">            <span class="keyword">if</span> (cnt[c] == <span class="number">0</span>) --diff;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">scramble</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s1, <span class="keyword">int</span> h1, <span class="keyword">const</span> <span class="built_in">string</span>&amp; s2, <span class="keyword">int</span> h2, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">unique_ptr</span>&lt;CP&gt; cp1(<span class="keyword">new</span> CP());</span><br><span class="line">        <span class="built_in">unique_ptr</span>&lt;CP&gt; cp2(<span class="keyword">new</span> CP());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            cp1-&gt;add(s1[h1 - <span class="number">1</span> + i]);</span><br><span class="line">            cp2-&gt;add(s1[h1 - <span class="number">1</span> + i]);</span><br><span class="line">            cp1-&gt;remove(s2[h2 - <span class="number">1</span> + i]);</span><br><span class="line">            cp2-&gt;remove(s2[h2 + len - i]);</span><br><span class="line">            <span class="keyword">if</span> (cp1-&gt;diff == <span class="number">0</span> &amp;&amp; scramble(s1, h1, s2, h2, i) &amp;&amp; scramble(s1, h1 + i, s2, h2 + i, len - i))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (cp2-&gt;diff == <span class="number">0</span> &amp;&amp; scramble(s1, h1, s2, h2 + len - i, i) &amp;&amp; scramble(s1, h1 + i, s2, h2, len - i))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isScramble</span><span class="params">(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2)</span> </span>&#123;</span><br><span class="line">        n = s1.length();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">unique_ptr</span>&lt;CP&gt; cp(<span class="keyword">new</span> CP());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            cp-&gt;add(s1[i]);</span><br><span class="line">            cp-&gt;remove(s2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cp-&gt;diff != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> scramble(s1, <span class="number">0</span>, s2, <span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="97-interleaving-string"><a class="markdownIt-Anchor" href="#97-interleaving-string"></a> <a href="https://leetcode.com/problems/interleaving-string" target="_blank" rel="noopener">97. Interleaving String</a></h2><p>动态规划，f[i][j] 表示 s1 的前 i 位与 s2 的前 j 位能否组合成 s3 的前 i + j 位。</p><p>时间复杂度 <code>O(m * n)</code>，运行时间 <code>8 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isInterleave</span><span class="params">(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2, <span class="built_in">string</span> s3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s1.length();</span><br><span class="line">        <span class="keyword">int</span> m = s2.length();</span><br><span class="line">        <span class="keyword">if</span> (n + m != s3.length()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; f(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(m + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; ++j)</span><br><span class="line">                <span class="keyword">if</span> (f[i][j] &amp;&amp; i + j &lt; n + m) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s1[i + <span class="number">1</span> - <span class="number">1</span>] == s3[i + <span class="number">1</span> + j - <span class="number">1</span>])</span><br><span class="line">                        f[i + <span class="number">1</span>][j] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (s2[j + <span class="number">1</span> - <span class="number">1</span>] == s3[i + j + <span class="number">1</span> - <span class="number">1</span>])</span><br><span class="line">                        f[i][j + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n][m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="99-recover-binary-search-tree"><a class="markdownIt-Anchor" href="#99-recover-binary-search-tree"></a> <a href="https://leetcode.com/problems/recover-binary-search-tree" target="_blank" rel="noopener">99. Recover Binary Search Tree</a></h2><p>顺序遍历树找到两个异常节点。</p><p>时间复杂度 <code>O(n)</code>，运行时间 <code>48 ms</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    TreeNode* pre;</span><br><span class="line">    TreeNode* p1;</span><br><span class="line">    TreeNode* p2;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(TreeNode* x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x-&gt;left != <span class="literal">NULL</span>) go(x-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span> &amp;&amp; pre-&gt;val &gt; x-&gt;val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                p1 = pre;</span><br><span class="line">                p2 = x;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                p2 = x;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = x;</span><br><span class="line">        <span class="keyword">if</span> (x-&gt;right != <span class="literal">NULL</span>) go(x-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        pre = p1 = p2 = <span class="literal">NULL</span>;</span><br><span class="line">        go(root);</span><br><span class="line">        swap(p1-&gt;val, p2-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;4-median-of-two-sorted-arrays&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#4-median-of-two-sorted-arrays&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;4. Median of Two Sorted Arrays&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;问题等价为找 nums1 和 nums2 的第 k 大，用递归解决：&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://bbappyuanyuan.github.io/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>MiniJava 编译器前端</title>
    <link href="https://bbappyuanyuan.github.io/posts/dc1b68a6/"/>
    <id>https://bbappyuanyuan.github.io/posts/dc1b68a6/</id>
    <published>2015-12-03T00:24:13.000Z</published>
    <updated>2015-12-03T00:24:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>「编译原理」课程项目——利用 <a href="http://www.antlr.org/" target="_blank" rel="noopener">ANTLR4</a> 工具，为 MiniJava 语言构造一个简易的编译器前端，将输入转化为抽象语法树，并进行一定的语义检查。</p><p>项目代码已开源在 <a href="https://github.com/bbappyuanyuan/MiniJava" target="_blank" rel="noopener">GitHub</a>。</p><a id="more"></a><h3 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h3><p>参考 Christoph Mallon, Jo ̈rg Herter. <em>MiniJava Language Specification</em>, October 21, 2009. <a href="/posts/dc1b68a6/miniJava+langspec.pdf" title="附件">附件</a></p><h3 id="功能"><a class="markdownIt-Anchor" href="#功能"></a> 功能</h3><ul><li>词法分析</li><li>语法分析</li><li>抽象语法树GUI</li><li>出错位置和类型提示</li><li>标识符定义检查——是否使用未定义标识符，是否重复定义标识符等</li><li>方法调用参数检查</li><li>方法返回类型检查</li><li>标识符类型检查</li><li>运算类型检查</li></ul><h3 id="语法描述"><a class="markdownIt-Anchor" href="#语法描述"></a> 语法描述</h3><p><strong>MiniJava.g4</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line">grammar MiniJava;</span><br><span class="line"></span><br><span class="line">translationUnit</span><br><span class="line">    :   classDeclaration*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">classDeclaration</span><br><span class="line">    :   <span class="string">'class'</span> IDENTIFIER (<span class="string">'extends'</span> IDENTIFIER)? <span class="string">'&#123;'</span> classMember* <span class="string">'&#125;'</span></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">classMember</span><br><span class="line">    :   field</span><br><span class="line">    |   mainMethod</span><br><span class="line">    |   method</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">field</span><br><span class="line">    :   <span class="string">'public'</span> type IDENTIFIER <span class="string">';'</span></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">mainMethod</span><br><span class="line">    :   <span class="string">'public'</span> <span class="string">'static'</span> <span class="string">'void'</span> <span class="string">'main'</span> <span class="string">'('</span> <span class="string">'String'</span> <span class="string">'['</span> <span class="string">']'</span> IDENTIFIER <span class="string">')'</span> <span class="string">'&#123;'</span> blockStatement* <span class="string">'&#125;'</span></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">method</span><br><span class="line">    :   <span class="string">'public'</span> type IDENTIFIER <span class="string">'('</span> parameters? <span class="string">')'</span> <span class="string">'&#123;'</span> blockStatement* <span class="string">'&#125;'</span></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">parameters</span><br><span class="line">    :   parameter (<span class="string">','</span> parameter)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">parameter</span><br><span class="line">    :   type IDENTIFIER</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">type</span><br><span class="line">    :   <span class="string">'boolean'</span></span><br><span class="line">    |   <span class="string">'int'</span></span><br><span class="line">    |   <span class="string">'void'</span></span><br><span class="line">    |   IDENTIFIER</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">statement</span><br><span class="line">    :   block</span><br><span class="line">    |   printStatement</span><br><span class="line">    |   ifStatement</span><br><span class="line">    |   whileStatement</span><br><span class="line">    |   emptyStatement</span><br><span class="line">    |   expressionStatement</span><br><span class="line">    |   returnStatement</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">block</span><br><span class="line">    :   <span class="string">'&#123;'</span> blockStatement* <span class="string">'&#125;'</span></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">ifStatement</span><br><span class="line">    :   <span class="string">'if'</span> <span class="string">'('</span> expression <span class="string">')'</span> statement (<span class="string">'else'</span> statement)?</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">whileStatement</span><br><span class="line">    :   <span class="string">'while'</span> <span class="string">'('</span> expression <span class="string">')'</span> statement</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">emptyStatement</span><br><span class="line">    :   <span class="string">';'</span></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">printStatement</span><br><span class="line">    :   <span class="string">'System'</span> <span class="string">'.'</span> <span class="string">'out'</span> <span class="string">'.'</span> <span class="string">'println'</span> <span class="string">'('</span> expression <span class="string">')'</span> <span class="string">';'</span></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">expressionStatement</span><br><span class="line">    :   expression <span class="string">';'</span></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">returnStatement</span><br><span class="line">    :   <span class="string">'return'</span> expression? <span class="string">';'</span></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">blockStatement</span><br><span class="line">    :   statement</span><br><span class="line">    |   localVariableDeclarationStatement</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">localVariableDeclarationStatement</span><br><span class="line">    :   <span class="function">type <span class="title">IDENTIFIER</span> <span class="params">(<span class="string">'='</span> expression)</span>? '</span>;<span class="string">'</span></span><br><span class="line"><span class="string">    ;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">expression</span></span><br><span class="line"><span class="string">    :   primaryExpression</span></span><br><span class="line"><span class="string">    |   expression '</span>.<span class="string">' IDENTIFIER '</span>(<span class="string">' expressionList? '</span>)<span class="string">'</span></span><br><span class="line"><span class="string">    |   expression '</span>.<span class="string">' IDENTIFIER</span></span><br><span class="line"><span class="string">    |   '</span><span class="keyword">new</span><span class="string">' IDENTIFIER '</span>(<span class="string">' '</span>)<span class="string">'</span></span><br><span class="line"><span class="string">    |   ('</span>-<span class="string">'|'</span>!<span class="string">') expression</span></span><br><span class="line"><span class="string">    |   expression ('</span>*<span class="string">' | '</span>/<span class="string">' | '</span>%<span class="string">') expression</span></span><br><span class="line"><span class="string">    |   expression ('</span>+<span class="string">' | '</span>-<span class="string">') expression</span></span><br><span class="line"><span class="string">    |   expression ('</span>&lt;=<span class="string">' | '</span>&gt;=<span class="string">' | '</span>&gt;<span class="string">' | '</span>&lt;<span class="string">') expression</span></span><br><span class="line"><span class="string">    |   expression ('</span>==<span class="string">' | '</span>!=<span class="string">') expression</span></span><br><span class="line"><span class="string">    |   expression '</span>&amp;<span class="string">' expression</span></span><br><span class="line"><span class="string">    |   expression '</span>|<span class="string">' expression</span></span><br><span class="line"><span class="string">    |   expression '</span>&amp;&amp;<span class="string">' expression</span></span><br><span class="line"><span class="string">    |   expression '</span>||<span class="string">' expression</span></span><br><span class="line"><span class="string">    |   expression '</span>=<span class="string">'&lt;assoc=right&gt; expression</span></span><br><span class="line"><span class="string">    ;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">primaryExpression</span></span><br><span class="line"><span class="string">    :   '</span>(<span class="string">' expression '</span>)<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span><span class="keyword">this</span><span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span><span class="keyword">null</span><span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span><span class="keyword">false</span><span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span><span class="keyword">true</span><span class="string">'</span></span><br><span class="line"><span class="string">    |   INTEGER</span></span><br><span class="line"><span class="string">    |   IDENTIFIER '</span>(<span class="string">' expressionList? '</span>)<span class="string">'</span></span><br><span class="line"><span class="string">    |   IDENTIFIER</span></span><br><span class="line"><span class="string">    ;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">expressionList</span></span><br><span class="line"><span class="string">    :   expression ('</span>,<span class="string">' expression)*</span></span><br><span class="line"><span class="string">    ;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">INTEGER</span></span><br><span class="line"><span class="string">    :   [1-9] DIGIT*</span></span><br><span class="line"><span class="string">    ;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">IDENTIFIER</span></span><br><span class="line"><span class="string">    :   LETTER (LETTER | JAVAIDDIGIT)*</span></span><br><span class="line"><span class="string">    ;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fragment</span></span><br><span class="line"><span class="string">LETTER</span></span><br><span class="line"><span class="string">    :   '</span>\u0024<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u0041<span class="string">'..'</span>\u005a<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u005f<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u0061<span class="string">'..'</span>\u007a<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u00c0<span class="string">'..'</span>\u00d6<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u00d8<span class="string">'..'</span>\u00f6<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u00f8<span class="string">'..'</span>\u00ff<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u0100<span class="string">'..'</span>\u1fff<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u3040<span class="string">'..'</span>\u318f<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u3300<span class="string">'..'</span>\u337f<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u3400<span class="string">'..'</span>\u3d2d<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u4e00<span class="string">'..'</span>\u9fff<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\uf900<span class="string">'..'</span>\ufaff<span class="string">'</span></span><br><span class="line"><span class="string">    ;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fragment</span></span><br><span class="line"><span class="string">JAVAIDDIGIT</span></span><br><span class="line"><span class="string">    :   '</span>\u0030<span class="string">'..'</span>\u0039<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u0660<span class="string">'..'</span>\u0669<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u06f0<span class="string">'..'</span>\u06f9<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u0966<span class="string">'..'</span>\u096f<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u09e6<span class="string">'..'</span>\u09ef<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u0a66<span class="string">'..'</span>\u0a6f<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u0ae6<span class="string">'..'</span>\u0aef<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u0b66<span class="string">'..'</span>\u0b6f<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u0be7<span class="string">'..'</span>\u0bef<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u0c66<span class="string">'..'</span>\u0c6f<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u0ce6<span class="string">'..'</span>\u0cef<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u0d66<span class="string">'..'</span>\u0d6f<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u0e50<span class="string">'..'</span>\u0e59<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u0ed0<span class="string">'..'</span>\u0ed9<span class="string">'</span></span><br><span class="line"><span class="string">    |   '</span>\u1040<span class="string">'..'</span>\u1049<span class="string">'</span></span><br><span class="line"><span class="string">    ;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fragment</span></span><br><span class="line"><span class="string">DIGIT</span></span><br><span class="line"><span class="string">    :   [0-9]</span></span><br><span class="line"><span class="string">    ;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">LINE_COMMENT</span></span><br><span class="line"><span class="string">    :   '</span><span class="comment">//' .*? '\r'? '\n' -&gt; channel(HIDDEN)</span></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">COMMENT</span><br><span class="line">    :   <span class="string">'/*'</span> .*? <span class="string">'*/'</span> -&gt; channel(HIDDEN)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">WS</span><br><span class="line">    :   [ \t\r\u000C\n]+ -&gt; channel(HIDDEN)</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><h2 id="软件说明"><a class="markdownIt-Anchor" href="#软件说明"></a> 软件说明</h2><h3 id="环境"><a class="markdownIt-Anchor" href="#环境"></a> 环境</h3><ul><li>JDK 1.6</li><li>Apache Maven 3.0.5</li></ul><h3 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h3><p><code>mvn clean package assembly:single</code></p><h3 id="运行"><a class="markdownIt-Anchor" href="#运行"></a> 运行</h3><p><code>java -jar MiniJava-1.0-SNAPSHOT-jar-with-dependencies.jar [options...] files...</code></p><h3 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -jar &#123;jarFile&#125; [options...] files...</span><br><span class="line">VAL       : code sources</span><br><span class="line">-gui      : show abstract syntax tree (default: false)</span><br><span class="line">-rule VAL : start rule (default: translationUnit)</span><br></pre></td></tr></table></figure><h2 id="运行样例"><a class="markdownIt-Anchor" href="#运行样例"></a> 运行样例</h2><h3 id="命令"><a class="markdownIt-Anchor" href="#命令"></a> 命令</h3><p><code>java -jar MiniJava-1.0-jar-with-dependencies.jar –gui sample.txt</code></p><h3 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入</h3><p><strong>sample.txt</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">extends</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> v1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> v1;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method1</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equal</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> z = x - y;</span><br><span class="line">        <span class="keyword">int</span> z1 = x &amp;&amp; y;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> | <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> x == y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        method0(a);</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">        v1();</span><br><span class="line">        method1();</span><br><span class="line">        <span class="keyword">int</span> eq0 = equal(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">boolean</span> eq1 = equal(<span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">boolean</span> eq2 = equal(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        Class2 c20 = <span class="keyword">new</span> Class2();</span><br><span class="line">        Class2 c21 = <span class="keyword">null</span>;</span><br><span class="line">        Class2 c22 = <span class="keyword">new</span> MyClass();</span><br><span class="line">        Class2 c23 = <span class="keyword">false</span>;</span><br><span class="line">        method1(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class2</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class2</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">============== Analyzing <span class="string">'/Users/Yuanzi/Documents/project/MiniJava/src/main/resources/sample.txt'</span> ......</span><br><span class="line">line 1:22       class <span class="string">'MyClass'</span> not found</span><br><span class="line">class MyClass extends MyClass &#123;</span><br><span class="line">                      ^</span><br><span class="line">line 4:15       field <span class="string">'v1'</span> is already defined before</span><br><span class="line">    public int v1;</span><br><span class="line">               ^</span><br><span class="line">line 7:15       method <span class="string">'method1'</span> is already defined before</span><br><span class="line">    public int <span class="function"><span class="title">method1</span></span>() &#123; &#125;</span><br><span class="line">               ^</span><br><span class="line">line 11:17      <span class="string">'x'</span> is supposed to be a(n) boolean value but not a(n) int value</span><br><span class="line">        int z1 = x &amp;&amp; y;</span><br><span class="line">                 ^</span><br><span class="line">line 11:22      <span class="string">'y'</span> is supposed to be a(n) boolean value but not a(n) int value</span><br><span class="line">        int z1 = x &amp;&amp; y;</span><br><span class="line">                      ^</span><br><span class="line">line 12:15      <span class="built_in">return</span> <span class="built_in">type</span> should be boolean</span><br><span class="line">        <span class="built_in">return</span> 1 | 2;</span><br><span class="line">               ^</span><br><span class="line">line 17:8       variable <span class="string">'a'</span> not found</span><br><span class="line">        a = 1;</span><br><span class="line">        ^</span><br><span class="line">line 18:8       method <span class="string">'method0'</span> not found</span><br><span class="line">        method0(a);</span><br><span class="line">        ^</span><br><span class="line">line 18:16      variable <span class="string">'a'</span> not found</span><br><span class="line">        method0(a);</span><br><span class="line">                ^</span><br><span class="line">line 20:8       <span class="string">'v1'</span> is not a method but a variable</span><br><span class="line">        v1();</span><br><span class="line">        ^</span><br><span class="line">line 22:18      <span class="string">'equal(1,2)'</span> is supposed to be a(n) int value but not a(n) boolean value</span><br><span class="line">        int eq0 = equal(1, 2);</span><br><span class="line">                  ^</span><br><span class="line">line 23:28      <span class="string">'true'</span> is supposed to be a(n) int value but not a(n) boolean value</span><br><span class="line">        boolean eq1 = equal(<span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">                            ^</span><br><span class="line">line 23:34      <span class="string">'false'</span> is supposed to be a(n) int value but not a(n) boolean value</span><br><span class="line">        boolean eq1 = equal(<span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">                                  ^</span><br><span class="line">line 27:21      <span class="string">'newMyClass()'</span> is supposed to be a(n) Class2 value but not a(n) MyClass value</span><br><span class="line">        Class2 c22 = new MyClass();</span><br><span class="line">                     ^</span><br><span class="line">line 28:21      <span class="string">'false'</span> is supposed to be a(n) Class2 value but not a(n) boolean value</span><br><span class="line">        Class2 c23 = <span class="literal">false</span>;</span><br><span class="line">                     ^</span><br><span class="line">line 29:8       method <span class="string">'method1'</span> requires 0 parameter(s)</span><br><span class="line">        method1(b);</span><br><span class="line">        ^</span><br><span class="line">line 34:6       class <span class="string">'Class2'</span> is already defined before</span><br><span class="line">class Class2 &#123; &#125;</span><br><span class="line">      ^</span><br><span class="line">============== Done.</span><br></pre></td></tr></table></figure><h3 id="gui"><a class="markdownIt-Anchor" href="#gui"></a> GUI</h3><img src="/posts/dc1b68a6/AST.png" title="Abstract Syntax Tree">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#介绍&quot;&gt;&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;「编译原理」课程项目——利用 &lt;a href=&quot;http://www.antlr.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ANTLR4&lt;/a&gt; 工具，为 MiniJava 语言构造一个简易的编译器前端，将输入转化为抽象语法树，并进行一定的语义检查。&lt;/p&gt;
&lt;p&gt;项目代码已开源在 &lt;a href=&quot;https://github.com/bbappyuanyuan/MiniJava&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://bbappyuanyuan.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="ANTLR" scheme="https://bbappyuanyuan.github.io/tags/ANTLR/"/>
    
      <category term="Java" scheme="https://bbappyuanyuan.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
